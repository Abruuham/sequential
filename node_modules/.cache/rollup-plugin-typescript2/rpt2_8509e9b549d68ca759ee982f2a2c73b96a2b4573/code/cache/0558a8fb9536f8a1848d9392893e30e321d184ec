{"code":"import { ClickCommandType } from '../workspace';\r\nimport { MoveViewportBehavior } from './move-viewport-behavior';\r\nimport { SelectStepBehavior } from './select-step-behavior';\r\nimport { PressingBehavior } from './pressing-behaviors/pressing-behavior';\r\nimport { RerenderStepPressingBehaviorHandler } from './pressing-behaviors/rerender-step-pressing-behavior-handler';\r\nimport { OpenFolderPressingBehaviorHandler } from './pressing-behaviors/open-folder-pressing-behavior-handler';\r\nimport { TriggerCustomActionPressingBehaviorHandler } from './pressing-behaviors/trigger-custom-action-pressing-behavior-handler';\r\nexport class ClickBehaviorResolver {\r\n    constructor(context) {\r\n        this.context = context;\r\n    }\r\n    resolve(commandOrNull, element, forceMove) {\r\n        if (!commandOrNull) {\r\n            return MoveViewportBehavior.create(!forceMove, this.context);\r\n        }\r\n        switch (commandOrNull.type) {\r\n            case ClickCommandType.selectStep:\r\n                return SelectStepBehavior.create(commandOrNull.component, forceMove, this.context);\r\n            case ClickCommandType.rerenderStep:\r\n                return PressingBehavior.create(element, new RerenderStepPressingBehaviorHandler(this.context));\r\n            case ClickCommandType.openFolder:\r\n                return PressingBehavior.create(element, new OpenFolderPressingBehaviorHandler(commandOrNull, this.context));\r\n            case ClickCommandType.triggerCustomAction:\r\n                return PressingBehavior.create(element, new TriggerCustomActionPressingBehaviorHandler(commandOrNull, this.context.customActionController));\r\n            default:\r\n                throw new Error('Not supported behavior type');\r\n        }\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-context.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/index.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/behaviors/behavior.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/behaviors/move-viewport-behavior.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/behaviors/select-step-behavior.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/behaviors/pressing-behaviors/pressing-behavior.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/behaviors/pressing-behaviors/rerender-step-pressing-behavior-handler.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/behaviors/pressing-behaviors/open-folder-pressing-behavior-handler.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/behaviors/pressing-behaviors/trigger-custom-action-pressing-behavior-handler.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/behaviors/click-behavior-resolver.d.ts","writeByteOrderMark":false,"text":"import { DesignerContext } from '../designer-context';\r\nimport { ClickCommand } from '../workspace';\r\nimport { Behavior } from './behavior';\r\nexport declare class ClickBehaviorResolver {\r\n    private readonly context;\r\n    constructor(context: DesignerContext);\r\n    resolve(commandOrNull: ClickCommand | null, element: Element, forceMove: boolean): Behavior;\r\n}\r\n"}}
