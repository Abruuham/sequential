{"code":"import { Badges } from './badges/badges';\r\nimport { ClickCommandType } from './component';\r\nexport class StepComponent {\r\n    static create(view, stepContext, componentContext) {\r\n        const badges = Badges.createForStep(stepContext, view, componentContext);\r\n        return new StepComponent(view, stepContext.step, stepContext.parentSequence, view.hasOutput(), badges);\r\n    }\r\n    constructor(view, step, parentSequence, hasOutput, badges) {\r\n        this.view = view;\r\n        this.step = step;\r\n        this.parentSequence = parentSequence;\r\n        this.hasOutput = hasOutput;\r\n        this.badges = badges;\r\n        this.isDisabled = false;\r\n    }\r\n    findById(stepId) {\r\n        if (this.step.id === stepId) {\r\n            return this;\r\n        }\r\n        if (this.view.sequenceComponents) {\r\n            for (const component of this.view.sequenceComponents) {\r\n                const result = component.findById(stepId);\r\n                if (result) {\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    resolveClick(click) {\r\n        if (this.view.sequenceComponents) {\r\n            for (const component of this.view.sequenceComponents) {\r\n                const result = component.resolveClick(click);\r\n                if (result) {\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        const badgeResult = this.badges.resolveClick(click);\r\n        if (badgeResult) {\r\n            return badgeResult;\r\n        }\r\n        const viewResult = this.view.resolveClick(click);\r\n        if (viewResult) {\r\n            return viewResult === true\r\n                ? {\r\n                    type: ClickCommandType.selectStep,\r\n                    component: this\r\n                }\r\n                : viewResult;\r\n        }\r\n        return null;\r\n    }\r\n    getPlaceholders(result) {\r\n        if (!this.isDisabled) {\r\n            if (this.view.sequenceComponents) {\r\n                this.view.sequenceComponents.forEach(component => component.getPlaceholders(result));\r\n            }\r\n            if (this.view.placeholders) {\r\n                this.view.placeholders.forEach(ph => result.push(ph));\r\n            }\r\n        }\r\n    }\r\n    setIsDragging(isDragging) {\r\n        if (!this.isDisabled) {\r\n            if (this.view.sequenceComponents) {\r\n                this.view.sequenceComponents.forEach(component => component.setIsDragging(isDragging));\r\n            }\r\n            if (this.view.placeholders) {\r\n                this.view.placeholders.forEach(ph => ph.setIsVisible(isDragging));\r\n            }\r\n        }\r\n        this.view.setIsDragging(isDragging);\r\n    }\r\n    setIsSelected(isSelected) {\r\n        this.view.setIsSelected(isSelected);\r\n    }\r\n    setIsDisabled(isDisabled) {\r\n        this.isDisabled = isDisabled;\r\n        this.view.setIsDisabled(isDisabled);\r\n    }\r\n    updateBadges(result) {\r\n        if (this.view.sequenceComponents) {\r\n            this.view.sequenceComponents.forEach(component => component.updateBadges(result));\r\n        }\r\n        this.badges.update(result);\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/component-context.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/definition.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/badges/badges.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/component.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/workspace/step-component.d.ts","writeByteOrderMark":false,"text":"import { ComponentContext } from '../component-context';\r\nimport { Sequence, Step } from '../definition';\r\nimport { StepContext } from '../designer-extension';\r\nimport { BadgesResult, ClickDetails, ClickCommand, Component, Placeholder, StepComponentView } from './component';\r\nexport declare class StepComponent implements Component {\r\n    readonly view: StepComponentView;\r\n    readonly step: Step;\r\n    readonly parentSequence: Sequence;\r\n    readonly hasOutput: boolean;\r\n    private readonly badges;\r\n    static create(view: StepComponentView, stepContext: StepContext, componentContext: ComponentContext): StepComponent;\r\n    private isDisabled;\r\n    private constructor();\r\n    findById(stepId: string): StepComponent | null;\r\n    resolveClick(click: ClickDetails): ClickCommand | null;\r\n    getPlaceholders(result: Placeholder[]): void;\r\n    setIsDragging(isDragging: boolean): void;\r\n    setIsSelected(isSelected: boolean): void;\r\n    setIsDisabled(isDisabled: boolean): void;\r\n    updateBadges(result: BadgesResult): void;\r\n}\r\n"}}
