{"code":"export {};\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/api/index.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/api/designer-api.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/component-context.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/index.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/custom-action-controller.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/definition.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/index.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/designer-extension.d.ts","writeByteOrderMark":false,"text":"import { WorkspaceApi } from './api';\r\nimport { DesignerApi } from './api/designer-api';\r\nimport { ComponentContext } from './component-context';\r\nimport { Vector } from './core';\r\nimport { CustomActionController } from './custom-action-controller';\r\nimport { ComponentType, Sequence, Step } from './definition';\r\nimport { Badge, Component, Placeholder, PlaceholderDirection, SequenceComponent, StepComponentView } from './workspace';\r\nexport interface DesignerExtension {\r\n    steps?: StepExtension[];\r\n    stepComponentViewWrapper?: StepComponentViewWrapperExtension;\r\n    badges?: BadgeExtension[];\r\n    uiComponents?: UiComponentExtension[];\r\n    draggedComponent?: DraggedComponentExtension;\r\n    wheelController?: WheelControllerExtension;\r\n    viewportController?: ViewportControllerExtension;\r\n    placeholderController?: PlaceholderControllerExtension;\r\n    placeholder?: PlaceholderExtension;\r\n    grid?: GridExtension;\r\n    rootComponent?: RootComponentExtension;\r\n    sequenceComponent?: SequenceComponentExtension;\r\n    contextMenu?: ContextMenuExtension;\r\n    daemons?: DaemonExtension[];\r\n}\r\nexport interface StepExtension<S extends Step = Step> {\r\n    componentType: ComponentType;\r\n    createComponentView(parentElement: SVGElement, stepContext: StepContext<S>, viewContext: StepComponentViewContext): StepComponentView;\r\n}\r\nexport type StepComponentViewFactory = StepExtension['createComponentView'];\r\nexport interface StepComponentViewContext {\r\n    getStepIconUrl(): string | null;\r\n    createSequenceComponent(parentElement: SVGElement, sequence: Sequence): SequenceComponent;\r\n    createPlaceholderForArea(parentElement: SVGElement, size: Vector, direction: PlaceholderDirection, sequence: Sequence, index: number): Placeholder;\r\n}\r\nexport interface StepContext<S extends Step = Step> {\r\n    parentSequence: Sequence;\r\n    step: S;\r\n    depth: number;\r\n    position: number;\r\n    isInputConnected: boolean;\r\n    isOutputConnected: boolean;\r\n}\r\nexport interface SequenceContext {\r\n    sequence: Sequence;\r\n    depth: number;\r\n    isInputConnected: boolean;\r\n    isOutputConnected: boolean;\r\n}\r\nexport interface StepComponentViewWrapperExtension {\r\n    wrap(view: StepComponentView, stepContext: StepContext): StepComponentView;\r\n}\r\nexport interface BadgeExtension {\r\n    id: string;\r\n    createForStep(parentElement: SVGElement, stepContext: StepContext, componentContext: ComponentContext): Badge;\r\n    createForRoot?: (parentElement: SVGElement, componentContext: ComponentContext) => Badge;\r\n    createStartValue(): unknown;\r\n}\r\nexport interface WheelControllerExtension {\r\n    create(api: WorkspaceApi): WheelController;\r\n}\r\nexport interface WheelController {\r\n    onWheel(e: WheelEvent): void;\r\n}\r\nexport interface UiComponentExtension {\r\n    create(root: HTMLElement, api: DesignerApi): UiComponent;\r\n}\r\nexport interface UiComponent {\r\n    destroy(): void;\r\n}\r\nexport interface DraggedComponentExtension {\r\n    create(parentElement: HTMLElement, step: Step, componentContext: ComponentContext): DraggedComponent;\r\n}\r\nexport interface DraggedComponent {\r\n    width: number;\r\n    height: number;\r\n    destroy(): void;\r\n}\r\nexport interface GridExtension {\r\n    create(): Grid;\r\n}\r\nexport interface Grid {\r\n    size: Vector;\r\n    element: SVGElement;\r\n    setScale(scale: number, scaledSize: Vector): void;\r\n}\r\nexport interface RootComponentExtension {\r\n    create(parentElement: SVGElement, sequence: Sequence, parentPlaceIndicator: SequencePlaceIndicator | null, context: ComponentContext): Component;\r\n}\r\nexport interface SequencePlaceIndicator {\r\n    sequence: Sequence;\r\n    index: number;\r\n}\r\nexport interface SequenceComponentExtension {\r\n    create(parentElement: SVGElement, sequenceContext: SequenceContext, componentContext: ComponentContext): SequenceComponent;\r\n}\r\nexport interface ContextMenuExtension {\r\n    createItemsProvider?: (customActionController: CustomActionController) => ContextMenuItemsProvider;\r\n}\r\nexport interface ContextMenuItemsProvider {\r\n    getItems(step: Step | null, sequence: Sequence): ContextMenuItem[];\r\n}\r\nexport interface ContextMenuItem {\r\n    readonly label: string;\r\n    readonly order: number;\r\n    readonly callback?: () => void;\r\n}\r\nexport interface PlaceholderControllerExtension {\r\n    create(): PlaceholderController;\r\n}\r\nexport interface PlaceholderController {\r\n    canCreate(sequence: Sequence, index: number): boolean;\r\n}\r\nexport interface PlaceholderExtension {\r\n    gapSize: Vector;\r\n    createForGap(parentElement: SVGElement, sequence: Sequence, index: number): Placeholder;\r\n    createForArea(parentElement: SVGElement, size: Vector, direction: PlaceholderDirection, sequence: Sequence, index: number): Placeholder;\r\n}\r\nexport interface ViewportControllerExtension {\r\n    create(api: WorkspaceApi): ViewportController;\r\n}\r\nexport interface ViewportController {\r\n    setDefault(): void;\r\n    zoom(direction: boolean): void;\r\n    focusOnComponent(componentPosition: Vector, componentSize: Vector): void;\r\n}\r\nexport interface Viewport {\r\n    readonly position: Vector;\r\n    readonly scale: number;\r\n}\r\nexport interface DaemonExtension {\r\n    create(api: DesignerApi): Daemon;\r\n}\r\nexport interface Daemon {\r\n    destroy(): void;\r\n}\r\n"}}
