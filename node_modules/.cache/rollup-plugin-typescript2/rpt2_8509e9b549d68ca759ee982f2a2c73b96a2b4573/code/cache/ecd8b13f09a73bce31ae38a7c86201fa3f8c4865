{"code":"export class ContextMenu {\r\n    static create(position, theme, items) {\r\n        const menu = document.createElement('div');\r\n        menu.style.left = `${position.x}px`;\r\n        menu.style.top = `${position.y}px`;\r\n        menu.className = `sqd-context-menu sqd-theme-${theme}`;\r\n        const elements = [];\r\n        for (let index = 0; index < items.length; index++) {\r\n            const item = items[index];\r\n            const element = document.createElement('div');\r\n            if (item.callback) {\r\n                element.className = 'sqd-context-menu-item';\r\n                element.innerText = item.label;\r\n            }\r\n            else {\r\n                element.className = 'sqd-context-menu-group';\r\n                element.innerText = item.label;\r\n            }\r\n            elements.push(element);\r\n            menu.appendChild(element);\r\n        }\r\n        const instance = new ContextMenu(menu, elements, items, Date.now());\r\n        document.addEventListener('mousedown', instance.mouseDown, false);\r\n        document.addEventListener('mouseup', instance.mouseUp, false);\r\n        document.addEventListener('touchstart', instance.mouseDown, false);\r\n        document.addEventListener('touchend', instance.mouseUp, false);\r\n        document.body.appendChild(menu);\r\n        return instance;\r\n    }\r\n    constructor(menu, elements, items, startTime) {\r\n        this.menu = menu;\r\n        this.elements = elements;\r\n        this.items = items;\r\n        this.startTime = startTime;\r\n        this.isAttached = true;\r\n        this.mouseDown = (e) => {\r\n            const index = this.findIndex(e.target);\r\n            if (index === null) {\r\n                this.tryDestroy();\r\n            }\r\n            else {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            }\r\n        };\r\n        this.mouseUp = (e) => {\r\n            const dt = Date.now() - this.startTime;\r\n            if (dt < 300) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                return;\r\n            }\r\n            try {\r\n                const index = this.findIndex(e.target);\r\n                if (index !== null) {\r\n                    const item = this.items[index];\r\n                    if (item.callback) {\r\n                        item.callback();\r\n                    }\r\n                }\r\n            }\r\n            finally {\r\n                this.tryDestroy();\r\n            }\r\n        };\r\n    }\r\n    findIndex(element) {\r\n        for (let index = 0; index < this.elements.length; index++) {\r\n            if (this.elements[index].contains(element)) {\r\n                return index;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    tryDestroy() {\r\n        if (this.isAttached) {\r\n            document.body.removeChild(this.menu);\r\n            document.removeEventListener('mousedown', this.mouseDown, false);\r\n            document.removeEventListener('mouseup', this.mouseUp, false);\r\n            document.removeEventListener('touchstart', this.mouseDown, false);\r\n            document.removeEventListener('touchend', this.mouseUp, false);\r\n            this.isAttached = false;\r\n        }\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/index.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-extension.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/workspace/context-menu/context-menu.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../../core';\r\nimport { ContextMenuItem } from '../../designer-extension';\r\nexport declare class ContextMenu {\r\n    private readonly menu;\r\n    private readonly elements;\r\n    private readonly items;\r\n    private readonly startTime;\r\n    static create(position: Vector, theme: string, items: ContextMenuItem[]): ContextMenu;\r\n    private isAttached;\r\n    private constructor();\r\n    private readonly mouseDown;\r\n    private readonly mouseUp;\r\n    private findIndex;\r\n    tryDestroy(): void;\r\n}\r\n"}}
