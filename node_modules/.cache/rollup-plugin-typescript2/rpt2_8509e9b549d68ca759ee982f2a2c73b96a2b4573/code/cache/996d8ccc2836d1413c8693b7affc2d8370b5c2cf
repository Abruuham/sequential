{"code":"export var KeyboardAction;\r\n(function (KeyboardAction) {\r\n    KeyboardAction[\"delete\"] = \"delete\";\r\n})(KeyboardAction || (KeyboardAction = {}));\r\nexport var DefinitionChangeType;\r\n(function (DefinitionChangeType) {\r\n    DefinitionChangeType[DefinitionChangeType[\"stepNameChanged\"] = 1] = \"stepNameChanged\";\r\n    DefinitionChangeType[DefinitionChangeType[\"stepPropertyChanged\"] = 2] = \"stepPropertyChanged\";\r\n    DefinitionChangeType[DefinitionChangeType[\"stepChildrenChanged\"] = 3] = \"stepChildrenChanged\";\r\n    DefinitionChangeType[DefinitionChangeType[\"stepDeleted\"] = 4] = \"stepDeleted\";\r\n    DefinitionChangeType[DefinitionChangeType[\"stepMoved\"] = 5] = \"stepMoved\";\r\n    DefinitionChangeType[DefinitionChangeType[\"stepInserted\"] = 6] = \"stepInserted\";\r\n    DefinitionChangeType[DefinitionChangeType[\"rootPropertyChanged\"] = 7] = \"rootPropertyChanged\";\r\n    DefinitionChangeType[DefinitionChangeType[\"rootReplaced\"] = 8] = \"rootReplaced\";\r\n})(DefinitionChangeType || (DefinitionChangeType = {}));\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/definition.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-extension.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/designer-configuration.d.ts","writeByteOrderMark":false,"text":"import { ComponentType, Definition, DefinitionWalker, Sequence, Step } from './definition';\r\nimport { DesignerExtension } from './designer-extension';\r\nexport interface DesignerConfiguration<TDefinition extends Definition = Definition> {\r\n    /**\r\n     * @description The theme of the designer.\r\n     * @default `light`\r\n     */\r\n    theme?: string;\r\n    /**\r\n     * @description The readonly mode of the designer.\r\n     */\r\n    isReadonly?: boolean;\r\n    /**\r\n     * @description The depth of the undo stack. If not set, undo/redo feature will be disabled.\r\n     */\r\n    undoStackSize?: number;\r\n    /**\r\n     * @description The initial undo stack. If not set, the undo stack will be empty.\r\n     */\r\n    undoStack?: UndoStack;\r\n    /**\r\n     * @description The common configuration of the steps.\r\n     */\r\n    steps: StepsConfiguration;\r\n    /**\r\n     * @description The configuration of the toolbox. If not set, the toolbox will be hidden.\r\n     */\r\n    toolbox: false | ToolboxConfiguration;\r\n    /**\r\n     * @description The configuration of the smart editor. If not set, the smart editor will be hidden.\r\n     */\r\n    editors: false | EditorsConfiguration<TDefinition>;\r\n    /**\r\n     * @description If true, the control bar will be displayed. In the next version, this property will be required.\r\n     */\r\n    controlBar: boolean;\r\n    /**\r\n     * @description If false, the context menu will be disabled. By default, the context menu is enabled.\r\n     */\r\n    contextMenu?: boolean;\r\n    /**\r\n     * @description The configuration of validators.\r\n     */\r\n    validator?: ValidatorConfiguration;\r\n    /**\r\n     * @description The configuration of the keyboard shortcuts. By default, the keyboard shortcuts are enabled (`true`). If `false`, the keyboard shortcuts are disabled.\r\n     */\r\n    keyboard?: boolean | KeyboardConfiguration;\r\n    /**\r\n     * @description The handler that handles custom actions.\r\n     */\r\n    customActionHandler?: CustomActionHandler;\r\n    /**\r\n     * @description The extensions of the designer.\r\n     */\r\n    extensions?: DesignerExtension[];\r\n    /**\r\n     * @description Custom definition walker.\r\n     */\r\n    definitionWalker?: DefinitionWalker;\r\n    /**\r\n     * @description Custom generator of unique identifiers.\r\n     */\r\n    uidGenerator?: UidGenerator;\r\n}\r\nexport type UidGenerator = () => string;\r\nexport type CustomActionHandler = (action: CustomAction, step: Step | null, sequence: Sequence, context: CustomActionHandlerContext) => void;\r\nexport interface CustomAction {\r\n    type: string;\r\n}\r\nexport interface CustomActionHandlerContext {\r\n    /**\r\n     * @description Notifies the designer that the name of the step has changed.\r\n     * @param stepId The id of the step whose name has changed.\r\n     */\r\n    notifyStepNameChanged(stepId: string): void;\r\n    /**\r\n     * @description Notifies the designer that the properties of the step have changed.\r\n     * @param stepId The id of the step whose properties have changed.\r\n     */\r\n    notifyStepPropertiesChanged(stepId: string): void;\r\n    /**\r\n     * @description Notifies the designer that the step has been inserted.\r\n     * @param stepId The id of the inserted step.\r\n     */\r\n    notifyStepInserted(stepId: string): void;\r\n    /**\r\n     * @description Notifies the designer that the step has been moved.\r\n     * @param stepId The id of the moved step.\r\n     */\r\n    notifyStepMoved(stepId: string): void;\r\n    /**\r\n     * @description Notifies the designer that the step has been deleted.\r\n     * @param stepId The id of the deleted step.\r\n     */\r\n    notifyStepDeleted(stepId: string): void;\r\n}\r\nexport interface ToolboxConfiguration {\r\n    labelProvider?: StepLabelProvider;\r\n    descriptionProvider?: StepDescriptionProvider;\r\n    isCollapsed?: boolean;\r\n    groups: ToolboxGroupConfiguration[];\r\n}\r\nexport type StepDefinition = Omit<Step, 'id'>;\r\nexport type StepLabelProvider = (step: StepDefinition) => string;\r\nexport type StepDescriptionProvider = (step: StepDefinition) => string;\r\nexport interface ToolboxGroupConfiguration {\r\n    name: string;\r\n    steps: StepDefinition[];\r\n}\r\nexport interface StepsConfiguration {\r\n    isSelectable?: (step: Step, parentSequence: Sequence) => boolean;\r\n    canInsertStep?: (step: Step, targetSequence: Sequence, targetIndex: number) => boolean;\r\n    isDraggable?: (step: Step, parentSequence: Sequence) => boolean;\r\n    canMoveStep?: (sourceSequence: Sequence, step: Step, targetSequence: Sequence, targetIndex: number) => boolean;\r\n    isDeletable?: (step: Step, parentSequence: Sequence) => boolean;\r\n    canDeleteStep?: (step: Step, parentSequence: Sequence) => boolean;\r\n    isDuplicable?: (step: Step, parentSequence: Sequence) => boolean;\r\n    /**\r\n     * @description The designer automatically selects the step after it is dropped. If true, the step will not be selected.\r\n     */\r\n    isAutoSelectDisabled?: boolean;\r\n    iconUrlProvider?: StepIconUrlProvider;\r\n}\r\nexport type StepIconUrlProvider = (componentType: ComponentType, type: string) => string | null;\r\nexport interface ValidatorConfiguration {\r\n    step?: StepValidator;\r\n    root?: RootValidator;\r\n}\r\nexport type StepValidator = (step: Step, parentSequence: Sequence, definition: Definition) => boolean;\r\nexport type RootValidator = (definition: Definition) => boolean;\r\nexport interface KeyboardConfiguration {\r\n    canHandleKey?: (action: KeyboardAction, event: KeyboardEvent) => boolean;\r\n}\r\nexport declare enum KeyboardAction {\r\n    delete = \"delete\"\r\n}\r\nexport interface EditorsConfiguration<TDefinition extends Definition = Definition> {\r\n    isCollapsed?: boolean;\r\n    stepEditorProvider: StepEditorProvider<TDefinition>;\r\n    rootEditorProvider: RootEditorProvider<TDefinition>;\r\n}\r\nexport interface StepEditorContext {\r\n    notifyNameChanged(): void;\r\n    notifyPropertiesChanged(): void;\r\n    notifyChildrenChanged(): void;\r\n}\r\nexport type StepEditorProvider<TDefinition extends Definition = Definition> = (step: Step, context: StepEditorContext, definition: TDefinition, isReadonly: boolean) => HTMLElement;\r\nexport interface RootEditorContext {\r\n    notifyPropertiesChanged(): void;\r\n}\r\nexport type RootEditorProvider<TDefinition extends Definition = Definition> = (definition: TDefinition, context: RootEditorContext, isReadonly: boolean) => HTMLElement;\r\nexport interface UndoStack {\r\n    index: number;\r\n    items: UndoStackItem[];\r\n}\r\nexport interface UndoStackItem {\r\n    definition: Definition;\r\n    changeType: DefinitionChangeType;\r\n    stepId: string | null;\r\n}\r\nexport declare enum DefinitionChangeType {\r\n    stepNameChanged = 1,\r\n    stepPropertyChanged = 2,\r\n    stepChildrenChanged = 3,\r\n    stepDeleted = 4,\r\n    stepMoved = 5,\r\n    stepInserted = 6,\r\n    rootPropertyChanged = 7,\r\n    rootReplaced = 8\r\n}\r\n"}}
