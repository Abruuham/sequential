{"code":"export var ClickCommandType;\r\n(function (ClickCommandType) {\r\n    ClickCommandType[ClickCommandType[\"selectStep\"] = 1] = \"selectStep\";\r\n    ClickCommandType[ClickCommandType[\"rerenderStep\"] = 2] = \"rerenderStep\";\r\n    ClickCommandType[ClickCommandType[\"openFolder\"] = 3] = \"openFolder\";\r\n    ClickCommandType[ClickCommandType[\"triggerCustomAction\"] = 4] = \"triggerCustomAction\";\r\n})(ClickCommandType || (ClickCommandType = {}));\r\nexport var PlaceholderDirection;\r\n(function (PlaceholderDirection) {\r\n    PlaceholderDirection[PlaceholderDirection[\"none\"] = 0] = \"none\";\r\n    PlaceholderDirection[PlaceholderDirection[\"in\"] = 1] = \"in\";\r\n    PlaceholderDirection[PlaceholderDirection[\"out\"] = 2] = \"out\";\r\n})(PlaceholderDirection || (PlaceholderDirection = {}));\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/vector.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/definition.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-configuration.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/step-component.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/workspace/component.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../core/vector';\r\nimport { Sequence, Step } from '../definition';\r\nimport { CustomAction } from '../designer-configuration';\r\nimport { StepComponent } from './step-component';\r\nexport interface Component {\r\n    view: ComponentView;\r\n    findById(stepId: string): StepComponent | null;\r\n    resolveClick(click: ClickDetails): ClickCommand | null;\r\n    getPlaceholders(result: Placeholder[]): void;\r\n    setIsDragging(isDragging: boolean): void;\r\n    updateBadges(result: BadgesResult): void;\r\n}\r\nexport interface ComponentView {\r\n    g: SVGGElement;\r\n    width: number;\r\n    height: number;\r\n    joinX: number;\r\n}\r\nexport interface StepComponentView extends ComponentView {\r\n    sequenceComponents: SequenceComponent[] | null;\r\n    placeholders: Placeholder[] | null;\r\n    hasOutput(): boolean;\r\n    /**\r\n     * @param click Details about the click.\r\n     * @returns `true` if selected a step, a click command if clicked a specific action, `null` if not clicked at this view.\r\n     */\r\n    resolveClick(click: ClickDetails): true | ClickCommand | null;\r\n    setIsDragging(isDragging: boolean): void;\r\n    setIsSelected(isSelected: boolean): void;\r\n    setIsDisabled(isDisabled: boolean): void;\r\n    getClientPosition(): Vector;\r\n}\r\nexport interface SequenceComponent extends Component {\r\n    hasOutput: boolean;\r\n}\r\nexport interface ClickDetails {\r\n    element: Element;\r\n    position: Vector;\r\n    scale: number;\r\n}\r\nexport type ClickCommand = SelectStepClickCommand | RerenderStepClickCommand | OpenFolderClickCommand | TriggerCustomActionClickCommand;\r\nexport interface BaseClickCommand {\r\n    type: ClickCommandType;\r\n}\r\nexport interface SelectStepClickCommand extends BaseClickCommand {\r\n    type: ClickCommandType.selectStep;\r\n    component: StepComponent;\r\n}\r\nexport interface RerenderStepClickCommand extends BaseClickCommand {\r\n    type: ClickCommandType.rerenderStep;\r\n    step: Step;\r\n}\r\nexport interface OpenFolderClickCommand extends BaseClickCommand {\r\n    type: ClickCommandType.openFolder;\r\n    step: Step;\r\n}\r\nexport interface TriggerCustomActionClickCommand extends BaseClickCommand {\r\n    type: ClickCommandType.triggerCustomAction;\r\n    step: Step | null;\r\n    sequence: Sequence;\r\n    action: CustomAction;\r\n}\r\nexport declare enum ClickCommandType {\r\n    selectStep = 1,\r\n    rerenderStep = 2,\r\n    openFolder = 3,\r\n    triggerCustomAction = 4\r\n}\r\nexport interface BadgeView {\r\n    g: SVGGElement;\r\n    width: number;\r\n    height: number;\r\n}\r\nexport interface Badge {\r\n    view: BadgeView | null;\r\n    update(result: unknown): unknown;\r\n    resolveClick(click: ClickDetails): ClickCommand | null;\r\n}\r\nexport type BadgesResult = unknown[];\r\nexport interface Placeholder {\r\n    view: PlaceholderView;\r\n    parentSequence: Sequence;\r\n    index: number;\r\n    getClientRect(): DOMRect;\r\n    setIsHover(isHover: boolean): void;\r\n    setIsVisible(isVisible: boolean): void;\r\n    resolveClick(click: ClickDetails): ClickCommand | null;\r\n}\r\nexport declare enum PlaceholderDirection {\r\n    none = 0,\r\n    in = 1,\r\n    out = 2\r\n}\r\nexport interface PlaceholderView {\r\n    g: SVGGElement;\r\n}\r\n"}}
