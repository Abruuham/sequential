{"code":"import { Dom } from './core/dom';\r\nimport { Workspace } from './workspace/workspace';\r\nexport class DesignerView {\r\n    static create(parent, designerContext, api) {\r\n        const root = Dom.element('div', {\r\n            class: `sqd-designer sqd-theme-${designerContext.theme}`\r\n        });\r\n        parent.appendChild(root);\r\n        const workspace = Workspace.create(root, designerContext, api);\r\n        const uiComponents = designerContext.services.uiComponents.map(factory => factory.create(root, api));\r\n        const daemons = designerContext.services.daemons.map(factory => factory.create(api));\r\n        const view = new DesignerView(root, designerContext.layoutController, workspace, uiComponents, daemons);\r\n        view.reloadLayout();\r\n        window.addEventListener('resize', view.onResizeHandler, false);\r\n        return view;\r\n    }\r\n    constructor(root, layoutController, workspace, uiComponents, daemons) {\r\n        this.root = root;\r\n        this.layoutController = layoutController;\r\n        this.workspace = workspace;\r\n        this.uiComponents = uiComponents;\r\n        this.daemons = daemons;\r\n        this.onResizeHandler = () => this.onResize();\r\n    }\r\n    destroy() {\r\n        var _a;\r\n        window.removeEventListener('resize', this.onResizeHandler, false);\r\n        this.workspace.destroy();\r\n        this.uiComponents.forEach(component => component.destroy());\r\n        this.daemons.forEach(daemon => daemon.destroy());\r\n        (_a = this.root.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this.root);\r\n    }\r\n    onResize() {\r\n        this.reloadLayout();\r\n    }\r\n    reloadLayout() {\r\n        const isMobile = this.layoutController.isMobile();\r\n        Dom.toggleClass(this.root, !isMobile, 'sqd-layout-desktop');\r\n        Dom.toggleClass(this.root, isMobile, 'sqd-layout-mobile');\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/api/designer-api.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/dom.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-context.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/layout-controller.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/workspace.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/designer-view.d.ts","writeByteOrderMark":false,"text":"import { DesignerApi } from './api/designer-api';\r\nimport { DesignerContext } from './designer-context';\r\nimport { Daemon, UiComponent } from './designer-extension';\r\nimport { LayoutController } from './layout-controller';\r\nimport { Workspace } from './workspace/workspace';\r\nexport declare class DesignerView {\r\n    private readonly root;\r\n    private readonly layoutController;\r\n    readonly workspace: Workspace;\r\n    private readonly uiComponents;\r\n    private readonly daemons;\r\n    static create(parent: HTMLElement, designerContext: DesignerContext, api: DesignerApi): DesignerView;\r\n    private readonly onResizeHandler;\r\n    constructor(root: HTMLElement, layoutController: LayoutController, workspace: Workspace, uiComponents: UiComponent[], daemons: Daemon[]);\r\n    destroy(): void;\r\n    private onResize;\r\n    private reloadLayout;\r\n}\r\nexport type KeyUpHandler = (e: KeyboardEvent) => void;\r\n"}}
