{"code":"import { Dom } from '../core/dom';\r\nimport { readMousePosition, readTouchClientPosition, readTouchPosition } from '../core/event-readers';\r\nimport { Vector } from '../core/vector';\r\nimport { getAbsolutePosition } from '../core/get-absolute-position';\r\nlet lastGridPatternId = 0;\r\nconst listenerOptions = {\r\n    passive: false\r\n};\r\nexport class WorkspaceView {\r\n    static create(parent, componentContext) {\r\n        const patternId = 'sqd-grid-pattern-' + lastGridPatternId++;\r\n        const pattern = Dom.svg('pattern', {\r\n            id: patternId,\r\n            patternUnits: 'userSpaceOnUse'\r\n        });\r\n        const gridPattern = componentContext.services.grid.create();\r\n        const defs = Dom.svg('defs');\r\n        pattern.appendChild(gridPattern.element);\r\n        defs.appendChild(pattern);\r\n        const foreground = Dom.svg('g');\r\n        const workspace = Dom.element('div', {\r\n            class: 'sqd-workspace'\r\n        });\r\n        const canvas = Dom.svg('svg', {\r\n            class: 'sqd-workspace-canvas'\r\n        });\r\n        canvas.appendChild(defs);\r\n        canvas.appendChild(Dom.svg('rect', {\r\n            width: '100%',\r\n            height: '100%',\r\n            fill: `url(#${patternId})`\r\n        }));\r\n        canvas.appendChild(foreground);\r\n        workspace.appendChild(canvas);\r\n        parent.appendChild(workspace);\r\n        const view = new WorkspaceView(workspace, canvas, pattern, gridPattern, foreground, componentContext);\r\n        window.addEventListener('resize', view.onResizeHandler, false);\r\n        return view;\r\n    }\r\n    constructor(workspace, canvas, pattern, gridPattern, foreground, context) {\r\n        this.workspace = workspace;\r\n        this.canvas = canvas;\r\n        this.pattern = pattern;\r\n        this.gridPattern = gridPattern;\r\n        this.foreground = foreground;\r\n        this.context = context;\r\n        this.onResizeHandler = () => this.onResize();\r\n    }\r\n    render(sequence, parentSequencePlaceIndicator) {\r\n        if (this.rootComponent) {\r\n            this.foreground.removeChild(this.rootComponent.view.g);\r\n        }\r\n        this.rootComponent = this.context.services.rootComponent.create(this.foreground, sequence, parentSequencePlaceIndicator, this.context);\r\n        this.refreshSize();\r\n    }\r\n    setPositionAndScale(position, scale) {\r\n        const scaledSize = this.gridPattern.size.multiplyByScalar(scale);\r\n        Dom.attrs(this.pattern, {\r\n            x: position.x,\r\n            y: position.y,\r\n            width: scaledSize.x,\r\n            height: scaledSize.y\r\n        });\r\n        this.gridPattern.setScale(scale, scaledSize);\r\n        Dom.attrs(this.foreground, {\r\n            transform: `translate(${position.x}, ${position.y}) scale(${scale})`\r\n        });\r\n    }\r\n    getCanvasPosition() {\r\n        return getAbsolutePosition(this.canvas);\r\n    }\r\n    getCanvasSize() {\r\n        return new Vector(this.canvas.clientWidth, this.canvas.clientHeight);\r\n    }\r\n    bindClick(handler) {\r\n        this.canvas.addEventListener('mousedown', e => {\r\n            e.preventDefault();\r\n            handler(readMousePosition(e), e.target, e.button, e.altKey);\r\n        }, false);\r\n        this.canvas.addEventListener('touchstart', e => {\r\n            e.preventDefault();\r\n            const clientPosition = readTouchClientPosition(e);\r\n            const element = document.elementFromPoint(clientPosition.x, clientPosition.y);\r\n            if (element) {\r\n                const position = readTouchPosition(e);\r\n                handler(position, element, 0, false);\r\n            }\r\n        }, listenerOptions);\r\n    }\r\n    bindContextMenu(handler) {\r\n        this.canvas.addEventListener('contextmenu', e => {\r\n            e.preventDefault();\r\n            handler(readMousePosition(e), e.target);\r\n        }, false);\r\n    }\r\n    bindWheel(handler) {\r\n        this.canvas.addEventListener('wheel', handler, listenerOptions);\r\n    }\r\n    destroy() {\r\n        window.removeEventListener('resize', this.onResizeHandler, false);\r\n    }\r\n    refreshSize() {\r\n        Dom.attrs(this.canvas, {\r\n            width: this.workspace.offsetWidth,\r\n            height: this.workspace.offsetHeight\r\n        });\r\n    }\r\n    onResize() {\r\n        this.refreshSize();\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/dom.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/event-readers.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/vector.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/definition.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/component-context.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/component.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/get-absolute-position.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/workspace/workspace-view.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../core/vector';\r\nimport { Sequence } from '../definition';\r\nimport { SequencePlaceIndicator } from '../designer-extension';\r\nimport { ComponentContext } from '../component-context';\r\nimport { Component } from './component';\r\nexport declare class WorkspaceView {\r\n    private readonly workspace;\r\n    private readonly canvas;\r\n    private readonly pattern;\r\n    private readonly gridPattern;\r\n    private readonly foreground;\r\n    private readonly context;\r\n    static create(parent: HTMLElement, componentContext: ComponentContext): WorkspaceView;\r\n    private onResizeHandler;\r\n    rootComponent?: Component;\r\n    private constructor();\r\n    render(sequence: Sequence, parentSequencePlaceIndicator: SequencePlaceIndicator | null): void;\r\n    setPositionAndScale(position: Vector, scale: number): void;\r\n    getCanvasPosition(): Vector;\r\n    getCanvasSize(): Vector;\r\n    bindClick(handler: (position: Vector, target: Element, buttonIndex: number, altKey: boolean) => void): void;\r\n    bindContextMenu(handler: (position: Vector, target: Element) => void): void;\r\n    bindWheel(handler: (e: WheelEvent) => void): void;\r\n    destroy(): void;\r\n    refreshSize(): void;\r\n    private onResize;\r\n}\r\n"}}
