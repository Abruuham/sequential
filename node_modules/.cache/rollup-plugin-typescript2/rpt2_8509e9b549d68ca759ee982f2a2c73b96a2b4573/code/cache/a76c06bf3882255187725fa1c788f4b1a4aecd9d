{"code":"import { DefaultDraggedComponentExtension } from './behaviors/default-dragged-component-extension';\r\nimport { ControlBarExtension } from './control-bar/control-bar-extension';\r\nimport { KeyboardDaemonExtension } from './keyboard/keyboard-daemon-extension';\r\nimport { SmartEditorExtension } from './smart-editor/smart-editor-extension';\r\nimport { ToolboxExtension } from './toolbox/toolbox-extension';\r\nimport { ValidationErrorBadgeExtension } from './workspace/badges/validation-error/validation-error-badge-extension';\r\nimport { ContainerStepExtension } from './workspace/container-step/container-step-extension';\r\nimport { DefaultPlaceholderControllerExtension } from './workspace/placeholder/default-placeholder-controller-extension';\r\nimport { RectPlaceholderExtension } from './workspace/placeholder/rect-placeholder-extension';\r\nimport { StartStopRootComponentExtension } from './workspace/start-stop-root/start-stop-root-component-extension';\r\nimport { SwitchStepExtension } from './workspace/switch-step/switch-step-extension';\r\nimport { TaskStepExtension } from './workspace/task-step/task-step-extension';\r\nimport { ClassicWheelControllerExtension } from './workspace/viewport/classic-wheel-controller-extension';\r\nimport { DefaultViewportControllerExtension } from './workspace/viewport/default-viewport-controller-extension';\r\nimport { findValidationBadgeIndex } from './workspace/badges/find-validation-badge-index';\r\nimport { DefaultSequenceComponentExtension } from './workspace/sequence/default-sequence-component-extension';\r\nimport { DefaultStepComponentViewWrapperExtension } from './workspace/default-step-component-view-wrapper-extension';\r\nimport { LineGridExtension } from './workspace/grid/line-grid-extension';\r\nexport class ServicesResolver {\r\n    static resolve(extensions, configuration) {\r\n        const services = {};\r\n        merge(services, extensions || []);\r\n        setDefaults(services, configuration);\r\n        return services;\r\n    }\r\n}\r\nfunction merge(services, extensions) {\r\n    for (const ext of extensions) {\r\n        if (ext.steps) {\r\n            services.steps = (services.steps || []).concat(ext.steps);\r\n        }\r\n        if (ext.stepComponentViewWrapper) {\r\n            services.stepComponentViewWrapper = ext.stepComponentViewWrapper;\r\n        }\r\n        if (ext.badges) {\r\n            services.badges = (services.badges || []).concat(ext.badges);\r\n        }\r\n        if (ext.uiComponents) {\r\n            services.uiComponents = (services.uiComponents || []).concat(ext.uiComponents);\r\n        }\r\n        if (ext.draggedComponent) {\r\n            services.draggedComponent = ext.draggedComponent;\r\n        }\r\n        if (ext.wheelController) {\r\n            services.wheelController = ext.wheelController;\r\n        }\r\n        if (ext.placeholderController) {\r\n            services.placeholderController = ext.placeholderController;\r\n        }\r\n        if (ext.placeholder) {\r\n            services.placeholder = ext.placeholder;\r\n        }\r\n        if (ext.viewportController) {\r\n            services.viewportController = ext.viewportController;\r\n        }\r\n        if (ext.grid) {\r\n            services.grid = ext.grid;\r\n        }\r\n        if (ext.rootComponent) {\r\n            services.rootComponent = ext.rootComponent;\r\n        }\r\n        if (ext.sequenceComponent) {\r\n            services.sequenceComponent = ext.sequenceComponent;\r\n        }\r\n        if (ext.contextMenu) {\r\n            services.contextMenu = ext.contextMenu;\r\n        }\r\n        if (ext.daemons) {\r\n            services.daemons = (services.daemons || []).concat(ext.daemons);\r\n        }\r\n    }\r\n}\r\nfunction setDefaults(services, configuration) {\r\n    if (!services.steps) {\r\n        services.steps = [];\r\n    }\r\n    services.steps.push(ContainerStepExtension.create());\r\n    services.steps.push(SwitchStepExtension.create());\r\n    services.steps.push(TaskStepExtension.create());\r\n    if (!services.stepComponentViewWrapper) {\r\n        services.stepComponentViewWrapper = new DefaultStepComponentViewWrapperExtension();\r\n    }\r\n    if (!services.badges) {\r\n        services.badges = [];\r\n    }\r\n    if (findValidationBadgeIndex(services.badges) < 0) {\r\n        services.badges.push(ValidationErrorBadgeExtension.create());\r\n    }\r\n    if (!services.draggedComponent) {\r\n        services.draggedComponent = new DefaultDraggedComponentExtension();\r\n    }\r\n    if (!services.uiComponents) {\r\n        services.uiComponents = [];\r\n    }\r\n    if (configuration.controlBar) {\r\n        services.uiComponents.push(new ControlBarExtension());\r\n    }\r\n    if (configuration.editors) {\r\n        services.uiComponents.push(new SmartEditorExtension(configuration.editors));\r\n    }\r\n    if (configuration.toolbox) {\r\n        services.uiComponents.push(new ToolboxExtension());\r\n    }\r\n    if (!services.wheelController) {\r\n        services.wheelController = new ClassicWheelControllerExtension();\r\n    }\r\n    if (!services.placeholderController) {\r\n        services.placeholderController = new DefaultPlaceholderControllerExtension();\r\n    }\r\n    if (!services.placeholder) {\r\n        services.placeholder = RectPlaceholderExtension.create();\r\n    }\r\n    if (!services.viewportController) {\r\n        services.viewportController = new DefaultViewportControllerExtension();\r\n    }\r\n    if (!services.grid) {\r\n        services.grid = LineGridExtension.create();\r\n    }\r\n    if (!services.rootComponent) {\r\n        services.rootComponent = new StartStopRootComponentExtension();\r\n    }\r\n    if (!services.sequenceComponent) {\r\n        services.sequenceComponent = new DefaultSequenceComponentExtension();\r\n    }\r\n    if (!services.daemons) {\r\n        services.daemons = [];\r\n    }\r\n    if (configuration.keyboard === undefined || configuration.keyboard) {\r\n        services.daemons.push(KeyboardDaemonExtension.create(configuration.keyboard));\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/behaviors/default-dragged-component-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/control-bar/control-bar-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-configuration.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/keyboard/keyboard-daemon-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/smart-editor/smart-editor-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/toolbox/toolbox-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/badges/validation-error/validation-error-badge-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/container-step/container-step-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/placeholder/default-placeholder-controller-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/placeholder/rect-placeholder-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/start-stop-root/start-stop-root-component-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/switch-step/switch-step-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/task-step/task-step-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/viewport/classic-wheel-controller-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/viewport/default-viewport-controller-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/badges/find-validation-badge-index.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/sequence/default-sequence-component-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/default-step-component-view-wrapper-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/grid/line-grid-extension.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/services.d.ts","writeByteOrderMark":false,"text":"import { DesignerConfiguration } from './designer-configuration';\r\nimport { DesignerExtension } from './designer-extension';\r\nexport type Services = Required<DesignerExtension>;\r\nexport declare class ServicesResolver {\r\n    static resolve(extensions: DesignerExtension[] | undefined, configuration: DesignerConfiguration): Services;\r\n}\r\n"}}
