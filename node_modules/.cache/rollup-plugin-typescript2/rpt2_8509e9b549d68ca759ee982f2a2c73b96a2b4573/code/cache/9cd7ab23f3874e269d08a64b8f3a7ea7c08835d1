{"code":"import { Dom } from '../../core/dom';\r\nimport { getAbsolutePosition } from '../../core/get-absolute-position';\r\nimport { InputView } from '../common-views/input-view';\r\nimport { OutputView } from '../common-views/output-view';\r\nexport const createTaskStepComponentViewFactory = (isInterrupted, cfg) => (parentElement, stepContext, viewContext) => {\r\n    const { step } = stepContext;\r\n    const g = Dom.svg('g', {\r\n        class: `sqd-step-task sqd-type-${step.type}`\r\n    });\r\n    parentElement.appendChild(g);\r\n    const boxHeight = cfg.paddingY * 2 + cfg.iconSize;\r\n    const text = Dom.svg('text', {\r\n        x: cfg.paddingLeft + cfg.iconSize + cfg.textMarginLeft,\r\n        y: boxHeight / 2,\r\n        class: 'sqd-step-task-text'\r\n    });\r\n    text.textContent = step.name;\r\n    g.appendChild(text);\r\n    const textWidth = Math.max(text.getBBox().width, cfg.minTextWidth);\r\n    const boxWidth = cfg.iconSize + cfg.paddingLeft + cfg.paddingRight + cfg.textMarginLeft + textWidth;\r\n    const rect = Dom.svg('rect', {\r\n        x: 0.5,\r\n        y: 0.5,\r\n        class: 'sqd-step-task-rect',\r\n        width: boxWidth,\r\n        height: boxHeight,\r\n        rx: cfg.radius,\r\n        ry: cfg.radius\r\n    });\r\n    g.insertBefore(rect, text);\r\n    const iconUrl = viewContext.getStepIconUrl();\r\n    const icon = iconUrl\r\n        ? Dom.svg('image', {\r\n            href: iconUrl\r\n        })\r\n        : Dom.svg('rect', {\r\n            class: 'sqd-step-task-empty-icon',\r\n            rx: cfg.radius,\r\n            ry: cfg.radius\r\n        });\r\n    Dom.attrs(icon, {\r\n        x: cfg.paddingLeft,\r\n        y: cfg.paddingY,\r\n        width: cfg.iconSize,\r\n        height: cfg.iconSize\r\n    });\r\n    g.appendChild(icon);\r\n    const isInputViewHidden = stepContext.depth === 0 && stepContext.position === 0 && !stepContext.isInputConnected;\r\n    const isOutputViewHidden = isInterrupted;\r\n    const inputView = isInputViewHidden ? null : InputView.createRoundInput(g, boxWidth / 2, 0, cfg.inputSize);\r\n    const outputView = isOutputViewHidden ? null : OutputView.create(g, boxWidth / 2, boxHeight, cfg.outputSize);\r\n    return {\r\n        g,\r\n        width: boxWidth,\r\n        height: boxHeight,\r\n        joinX: boxWidth / 2,\r\n        sequenceComponents: null,\r\n        placeholders: null,\r\n        hasOutput() {\r\n            return !!outputView;\r\n        },\r\n        getClientPosition() {\r\n            return getAbsolutePosition(rect);\r\n        },\r\n        resolveClick(click) {\r\n            return g.contains(click.element) ? true : null;\r\n        },\r\n        setIsDragging(isDragging) {\r\n            inputView === null || inputView === void 0 ? void 0 : inputView.setIsHidden(isDragging);\r\n            outputView === null || outputView === void 0 ? void 0 : outputView.setIsHidden(isDragging);\r\n        },\r\n        setIsDisabled(isDisabled) {\r\n            Dom.toggleClass(g, isDisabled, 'sqd-disabled');\r\n        },\r\n        setIsSelected(isSelected) {\r\n            Dom.toggleClass(rect, isSelected, 'sqd-selected');\r\n        }\r\n    };\r\n};\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/dom.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/get-absolute-position.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/vector.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/definition.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/common-views/input-view.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/common-views/output-view.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/component.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/task-step/task-step-component-view-configuration.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/workspace/task-step/task-step-component-view.d.ts","writeByteOrderMark":false,"text":"import { StepComponentViewFactory } from '../../designer-extension';\r\nimport { TaskStepComponentViewConfiguration } from './task-step-component-view-configuration';\r\nexport declare const createTaskStepComponentViewFactory: (isInterrupted: boolean, cfg: TaskStepComponentViewConfiguration) => StepComponentViewFactory;\r\n"}}
