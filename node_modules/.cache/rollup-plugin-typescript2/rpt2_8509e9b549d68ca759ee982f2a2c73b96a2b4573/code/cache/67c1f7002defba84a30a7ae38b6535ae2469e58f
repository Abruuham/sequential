{"code":"import { ObjectCloner } from './core/object-cloner';\r\nimport { DefinitionChangeType } from './designer-configuration';\r\nexport class HistoryController {\r\n    static create(initialStack, state, stateModifier, configuration) {\r\n        if (!configuration.undoStackSize || configuration.undoStackSize < 1) {\r\n            throw new Error('Invalid undo stack size');\r\n        }\r\n        const stack = initialStack || {\r\n            index: 0,\r\n            items: []\r\n        };\r\n        const controller = new HistoryController(stack, state, stateModifier, configuration.undoStackSize);\r\n        if (!initialStack) {\r\n            controller.rememberCurrent(DefinitionChangeType.rootReplaced, null);\r\n        }\r\n        state.onDefinitionChanged.subscribe(event => {\r\n            if (event.changeType !== DefinitionChangeType.rootReplaced) {\r\n                controller.rememberCurrent(event.changeType, event.stepId);\r\n            }\r\n        });\r\n        return controller;\r\n    }\r\n    constructor(stack, state, stateModifier, stackSize) {\r\n        this.stack = stack;\r\n        this.state = state;\r\n        this.stateModifier = stateModifier;\r\n        this.stackSize = stackSize;\r\n    }\r\n    canUndo() {\r\n        return this.stack.index > 1;\r\n    }\r\n    undo() {\r\n        this.stack.index--;\r\n        this.commit();\r\n    }\r\n    canRedo() {\r\n        return this.stack.index < this.stack.items.length;\r\n    }\r\n    redo() {\r\n        this.stack.index++;\r\n        this.commit();\r\n    }\r\n    dump() {\r\n        return Object.assign({}, this.stack);\r\n    }\r\n    replaceDefinition(definition) {\r\n        if (definition == this.state.definition) {\r\n            throw new Error('Cannot use the same instance of definition');\r\n        }\r\n        this.remember(definition, DefinitionChangeType.rootReplaced, null);\r\n        this.commit();\r\n    }\r\n    rememberCurrent(changeType, stepId) {\r\n        this.remember(this.state.definition, changeType, stepId);\r\n    }\r\n    remember(sourceDefinition, changeType, stepId) {\r\n        const definition = ObjectCloner.deepClone(sourceDefinition);\r\n        if (this.stack.items.length > 0 && this.stack.index === this.stack.items.length) {\r\n            const lastItem = this.stack.items[this.stack.items.length - 1];\r\n            if (areItemsEqual(lastItem, changeType, stepId)) {\r\n                lastItem.definition = definition;\r\n                return;\r\n            }\r\n        }\r\n        this.stack.items.splice(this.stack.index);\r\n        this.stack.items.push({\r\n            definition,\r\n            changeType,\r\n            stepId\r\n        });\r\n        if (this.stack.items.length > this.stackSize) {\r\n            this.stack.items.splice(0, this.stack.items.length - this.stackSize - 1);\r\n        }\r\n        this.stack.index = this.stack.items.length;\r\n    }\r\n    commit() {\r\n        const definition = ObjectCloner.deepClone(this.stack.items[this.stack.index - 1].definition);\r\n        this.stateModifier.replaceDefinition(definition);\r\n    }\r\n}\r\nfunction areItemsEqual(item, changeType, stepId) {\r\n    return changeType !== DefinitionChangeType.rootReplaced && item.changeType === changeType && item.stepId === stepId;\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/object-cloner.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-state.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-configuration.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/modifier/state-modifier.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/definition.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/history-controller.d.ts","writeByteOrderMark":false,"text":"import { DesignerState } from './designer-state';\r\nimport { DesignerConfiguration, UndoStack } from './designer-configuration';\r\nimport { StateModifier } from './modifier/state-modifier';\r\nimport { Definition } from './definition';\r\nexport declare class HistoryController {\r\n    private readonly stack;\r\n    private readonly state;\r\n    private readonly stateModifier;\r\n    private readonly stackSize;\r\n    static create(initialStack: UndoStack | undefined, state: DesignerState, stateModifier: StateModifier, configuration: DesignerConfiguration): HistoryController;\r\n    constructor(stack: UndoStack, state: DesignerState, stateModifier: StateModifier, stackSize: number);\r\n    canUndo(): boolean;\r\n    undo(): void;\r\n    canRedo(): boolean;\r\n    redo(): void;\r\n    dump(): UndoStack;\r\n    replaceDefinition(definition: Definition): void;\r\n    private rememberCurrent;\r\n    private remember;\r\n    private commit;\r\n}\r\n"}}
