{"code":"import { __awaiter } from \"tslib\";\r\nimport { SimpleEvent } from './core/simple-event';\r\nimport { isElementAttached } from './core/is-element-attached';\r\nimport { DesignerContext } from './designer-context';\r\nimport { DesignerView } from './designer-view';\r\nimport { ServicesResolver } from './services';\r\nimport { validateConfiguration } from './core/designer-configuration-validator';\r\nimport { DesignerApi } from './api';\r\nimport { race } from './core';\r\nexport class Designer {\r\n    /**\r\n     * Creates a designer.\r\n     * @param placeholder Placeholder where the designer will be attached.\r\n     * @param startDefinition Start definition of a flow.\r\n     * @param configuration Designer's configuration.\r\n     * @returns An instance of the designer.\r\n     */\r\n    static create(placeholder, startDefinition, configuration) {\r\n        if (!placeholder) {\r\n            throw new Error('Placeholder is not defined');\r\n        }\r\n        if (!isElementAttached(placeholder)) {\r\n            throw new Error('Placeholder is not attached to the DOM');\r\n        }\r\n        if (!startDefinition) {\r\n            throw new Error('Start definition is not defined');\r\n        }\r\n        const config = configuration;\r\n        validateConfiguration(config);\r\n        const services = ServicesResolver.resolve(configuration.extensions, config);\r\n        const designerContext = DesignerContext.create(placeholder, startDefinition, config, services);\r\n        const designerApi = DesignerApi.create(designerContext);\r\n        const view = DesignerView.create(placeholder, designerContext, designerApi);\r\n        const designer = new Designer(view, designerContext.state, designerContext.stateModifier, designerContext.definitionWalker, designerContext.historyController, designerApi);\r\n        view.workspace.onRendered.first().then(designer.onReady.forward);\r\n        race(0, designerContext.state.onDefinitionChanged, designerContext.state.onSelectedStepIdChanged).subscribe(([definition, selectedStepId]) => {\r\n            if (definition !== undefined) {\r\n                designer.onDefinitionChanged.forward(designerContext.state.definition);\r\n            }\r\n            if (selectedStepId !== undefined) {\r\n                designer.onSelectedStepIdChanged.forward(designerContext.state.selectedStepId);\r\n            }\r\n        });\r\n        designerContext.state.onViewportChanged.subscribe(designer.onViewportChanged.forward);\r\n        designerContext.state.onIsToolboxCollapsedChanged.subscribe(designer.onIsToolboxCollapsedChanged.forward);\r\n        designerContext.state.onIsEditorCollapsedChanged.subscribe(designer.onIsEditorCollapsedChanged.forward);\r\n        return designer;\r\n    }\r\n    constructor(view, state, stateModifier, walker, historyController, api) {\r\n        this.view = view;\r\n        this.state = state;\r\n        this.stateModifier = stateModifier;\r\n        this.walker = walker;\r\n        this.historyController = historyController;\r\n        this.api = api;\r\n        /**\r\n         * @description Fires when the designer is initialized and ready to use.\r\n         */\r\n        this.onReady = new SimpleEvent();\r\n        /**\r\n         * @description Fires when the definition has changed.\r\n         */\r\n        this.onDefinitionChanged = new SimpleEvent();\r\n        /**\r\n         * @description Fires when the viewport has changed.\r\n         */\r\n        this.onViewportChanged = new SimpleEvent();\r\n        /**\r\n         * @description Fires when the selected step has changed.\r\n         */\r\n        this.onSelectedStepIdChanged = new SimpleEvent();\r\n        /**\r\n         * @description Fires when the toolbox is collapsed or expanded.\r\n         */\r\n        this.onIsToolboxCollapsedChanged = new SimpleEvent();\r\n        /**\r\n         * @description Fires when the editor is collapsed or expanded.\r\n         */\r\n        this.onIsEditorCollapsedChanged = new SimpleEvent();\r\n    }\r\n    /**\r\n     * @returns the current definition of the workflow.\r\n     */\r\n    getDefinition() {\r\n        return this.state.definition;\r\n    }\r\n    /**\r\n     * @returns the validation result of the current definition.\r\n     */\r\n    isValid() {\r\n        return this.view.workspace.isValid;\r\n    }\r\n    /**\r\n     * @returns the readonly flag.\r\n     */\r\n    isReadonly() {\r\n        return this.state.isReadonly;\r\n    }\r\n    /**\r\n     * @description Changes the readonly flag.\r\n     */\r\n    setIsReadonly(isReadonly) {\r\n        this.state.setIsReadonly(isReadonly);\r\n    }\r\n    /**\r\n     * @returns current selected step id or `null` if nothing is selected.\r\n     */\r\n    getSelectedStepId() {\r\n        return this.state.selectedStepId;\r\n    }\r\n    /**\r\n     * @description Selects a step by the id.\r\n     */\r\n    selectStepById(stepId) {\r\n        this.stateModifier.trySelectStepById(stepId);\r\n    }\r\n    /**\r\n     * @returns the current viewport.\r\n     */\r\n    getViewport() {\r\n        return this.state.viewport;\r\n    }\r\n    /**\r\n     * @description Sets the viewport.\r\n     * @param viewport Viewport.\r\n     */\r\n    setViewport(viewport) {\r\n        this.state.setViewport(viewport);\r\n    }\r\n    /**\r\n     * @description Unselects the selected step.\r\n     */\r\n    clearSelectedStep() {\r\n        this.state.setSelectedStepId(null);\r\n    }\r\n    /**\r\n     * @description Moves the viewport to the step with the animation.\r\n     */\r\n    moveViewportToStep(stepId) {\r\n        this.api.viewport.moveViewportToStep(stepId);\r\n    }\r\n    /**\r\n     * @description Rerender the root component and all its children.\r\n     */\r\n    updateRootComponent() {\r\n        this.api.workspace.updateRootComponent();\r\n    }\r\n    /**\r\n     * @description Updates all badges.\r\n     */\r\n    updateBadges() {\r\n        this.api.workspace.updateBadges();\r\n    }\r\n    /**\r\n     * @returns a flag that indicates whether the toolbox is collapsed.\r\n     */\r\n    isToolboxCollapsed() {\r\n        return this.state.isToolboxCollapsed;\r\n    }\r\n    /**\r\n     * @description Sets a flag that indicates whether the toolbox is collapsed.\r\n     */\r\n    setIsToolboxCollapsed(isCollapsed) {\r\n        this.state.setIsToolboxCollapsed(isCollapsed);\r\n    }\r\n    /**\r\n     * @returns a flag that indicates whether the editor is collapsed.\r\n     */\r\n    isEditorCollapsed() {\r\n        return this.state.isEditorCollapsed;\r\n    }\r\n    /**\r\n     * @description Sets a flag that indicates whether the editor is collapsed.\r\n     */\r\n    setIsEditorCollapsed(isCollapsed) {\r\n        this.state.setIsEditorCollapsed(isCollapsed);\r\n    }\r\n    /**\r\n     * @description Dump the undo stack.\r\n     */\r\n    dumpUndoStack() {\r\n        return this.getHistoryController().dump();\r\n    }\r\n    /**\r\n     * Replaces the current definition with a new one and adds the previous definition to the undo stack.\r\n     * @param definition A new definition.\r\n     */\r\n    replaceDefinition(definition) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.getHistoryController().replaceDefinition(definition);\r\n            yield Promise.all([\r\n                this.view.workspace.onRendered.first(),\r\n                this.onDefinitionChanged.first()\r\n            ]);\r\n        });\r\n    }\r\n    /**\r\n     * @param needle A step, a sequence or a step id.\r\n     * @returns parent steps and branch names.\r\n     */\r\n    getStepParents(needle) {\r\n        return this.walker.getParents(this.state.definition, needle);\r\n    }\r\n    /**\r\n     * @returns the definition walker.\r\n     */\r\n    getWalker() {\r\n        return this.walker;\r\n    }\r\n    /**\r\n     * @description Destroys the designer and deletes all nodes from the placeholder.\r\n     */\r\n    destroy() {\r\n        this.view.destroy();\r\n    }\r\n    getHistoryController() {\r\n        if (!this.historyController) {\r\n            throw new Error('Undo feature is not activated');\r\n        }\r\n        return this.historyController;\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/simple-event.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/is-element-attached.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/definition.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-configuration.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-context.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-view.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-state.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/services.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/designer-configuration-validator.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/api/index.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/history-controller.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/index.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/modifier/state-modifier.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/designer.d.ts","writeByteOrderMark":false,"text":"import { SimpleEvent } from './core/simple-event';\r\nimport { Definition, DefinitionWalker, Sequence, Step, StepOrName } from './definition';\r\nimport { DesignerConfiguration, UndoStack } from './designer-configuration';\r\nimport { Viewport } from './designer-extension';\r\nexport declare class Designer<TDefinition extends Definition = Definition> {\r\n    private readonly view;\r\n    private readonly state;\r\n    private readonly stateModifier;\r\n    private readonly walker;\r\n    private readonly historyController;\r\n    private readonly api;\r\n    /**\r\n     * Creates a designer.\r\n     * @param placeholder Placeholder where the designer will be attached.\r\n     * @param startDefinition Start definition of a flow.\r\n     * @param configuration Designer's configuration.\r\n     * @returns An instance of the designer.\r\n     */\r\n    static create<TDef extends Definition>(placeholder: HTMLElement, startDefinition: TDef, configuration: DesignerConfiguration<TDef>): Designer<TDef>;\r\n    private constructor();\r\n    /**\r\n     * @description Fires when the designer is initialized and ready to use.\r\n     */\r\n    readonly onReady: SimpleEvent<void>;\r\n    /**\r\n     * @description Fires when the definition has changed.\r\n     */\r\n    readonly onDefinitionChanged: SimpleEvent<TDefinition>;\r\n    /**\r\n     * @description Fires when the viewport has changed.\r\n     */\r\n    readonly onViewportChanged: SimpleEvent<Viewport>;\r\n    /**\r\n     * @description Fires when the selected step has changed.\r\n     */\r\n    readonly onSelectedStepIdChanged: SimpleEvent<string | null>;\r\n    /**\r\n     * @description Fires when the toolbox is collapsed or expanded.\r\n     */\r\n    readonly onIsToolboxCollapsedChanged: SimpleEvent<boolean>;\r\n    /**\r\n     * @description Fires when the editor is collapsed or expanded.\r\n     */\r\n    readonly onIsEditorCollapsedChanged: SimpleEvent<boolean>;\r\n    /**\r\n     * @returns the current definition of the workflow.\r\n     */\r\n    getDefinition(): TDefinition;\r\n    /**\r\n     * @returns the validation result of the current definition.\r\n     */\r\n    isValid(): boolean;\r\n    /**\r\n     * @returns the readonly flag.\r\n     */\r\n    isReadonly(): boolean;\r\n    /**\r\n     * @description Changes the readonly flag.\r\n     */\r\n    setIsReadonly(isReadonly: boolean): void;\r\n    /**\r\n     * @returns current selected step id or `null` if nothing is selected.\r\n     */\r\n    getSelectedStepId(): string | null;\r\n    /**\r\n     * @description Selects a step by the id.\r\n     */\r\n    selectStepById(stepId: string): void;\r\n    /**\r\n     * @returns the current viewport.\r\n     */\r\n    getViewport(): Viewport;\r\n    /**\r\n     * @description Sets the viewport.\r\n     * @param viewport Viewport.\r\n     */\r\n    setViewport(viewport: Viewport): void;\r\n    /**\r\n     * @description Unselects the selected step.\r\n     */\r\n    clearSelectedStep(): void;\r\n    /**\r\n     * @description Moves the viewport to the step with the animation.\r\n     */\r\n    moveViewportToStep(stepId: string): void;\r\n    /**\r\n     * @description Rerender the root component and all its children.\r\n     */\r\n    updateRootComponent(): void;\r\n    /**\r\n     * @description Updates all badges.\r\n     */\r\n    updateBadges(): void;\r\n    /**\r\n     * @returns a flag that indicates whether the toolbox is collapsed.\r\n     */\r\n    isToolboxCollapsed(): boolean;\r\n    /**\r\n     * @description Sets a flag that indicates whether the toolbox is collapsed.\r\n     */\r\n    setIsToolboxCollapsed(isCollapsed: boolean): void;\r\n    /**\r\n     * @returns a flag that indicates whether the editor is collapsed.\r\n     */\r\n    isEditorCollapsed(): boolean;\r\n    /**\r\n     * @description Sets a flag that indicates whether the editor is collapsed.\r\n     */\r\n    setIsEditorCollapsed(isCollapsed: boolean): void;\r\n    /**\r\n     * @description Dump the undo stack.\r\n     */\r\n    dumpUndoStack(): UndoStack;\r\n    /**\r\n     * Replaces the current definition with a new one and adds the previous definition to the undo stack.\r\n     * @param definition A new definition.\r\n     */\r\n    replaceDefinition(definition: TDefinition): Promise<void>;\r\n    /**\r\n     * @param needle A step, a sequence or a step id.\r\n     * @returns parent steps and branch names.\r\n     */\r\n    getStepParents(needle: Sequence | Step | string): StepOrName[];\r\n    /**\r\n     * @returns the definition walker.\r\n     */\r\n    getWalker(): DefinitionWalker;\r\n    /**\r\n     * @description Destroys the designer and deletes all nodes from the placeholder.\r\n     */\r\n    destroy(): void;\r\n    private getHistoryController;\r\n}\r\n"}}
