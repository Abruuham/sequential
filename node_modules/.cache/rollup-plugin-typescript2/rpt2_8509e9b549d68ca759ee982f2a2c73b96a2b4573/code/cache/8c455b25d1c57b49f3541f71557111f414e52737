{"code":"import { Vector } from '../core/vector';\r\nimport { DragStepView } from './drag-step-behavior-view';\r\nimport { PlaceholderFinder } from './placeholder-finder';\r\nexport class DragStepBehavior {\r\n    static create(designerContext, step, draggedStepComponent) {\r\n        const view = DragStepView.create(step, designerContext.theme, designerContext.componentContext);\r\n        return new DragStepBehavior(view, designerContext.workspaceController, designerContext.state, step, designerContext.stateModifier, draggedStepComponent);\r\n    }\r\n    constructor(view, workspaceController, designerState, step, stateModifier, draggedStepComponent) {\r\n        this.view = view;\r\n        this.workspaceController = workspaceController;\r\n        this.designerState = designerState;\r\n        this.step = step;\r\n        this.stateModifier = stateModifier;\r\n        this.draggedStepComponent = draggedStepComponent;\r\n    }\r\n    onStart(position) {\r\n        let offset = null;\r\n        if (this.draggedStepComponent) {\r\n            this.draggedStepComponent.setIsDisabled(true);\r\n            const hasSameSize = this.draggedStepComponent.view.width === this.view.component.width &&\r\n                this.draggedStepComponent.view.height === this.view.component.height;\r\n            if (hasSameSize) {\r\n                // Mouse cursor will be positioned on the same place as the source component.\r\n                const pagePosition = this.draggedStepComponent.view.getClientPosition();\r\n                offset = position.subtract(pagePosition);\r\n            }\r\n        }\r\n        if (!offset) {\r\n            // Mouse cursor will be positioned in the center of the component.\r\n            offset = new Vector(this.view.component.width, this.view.component.height).divideByScalar(2);\r\n        }\r\n        this.view.setPosition(position.subtract(offset));\r\n        this.designerState.setIsDragging(true);\r\n        const placeholders = this.workspaceController.getPlaceholders();\r\n        this.state = {\r\n            startPosition: position,\r\n            finder: PlaceholderFinder.create(placeholders, this.designerState),\r\n            offset\r\n        };\r\n    }\r\n    onMove(delta) {\r\n        if (this.state) {\r\n            const newPosition = this.state.startPosition.subtract(delta).subtract(this.state.offset);\r\n            this.view.setPosition(newPosition);\r\n            const placeholder = this.state.finder.find(newPosition, this.view.component.width, this.view.component.height);\r\n            if (this.currentPlaceholder !== placeholder) {\r\n                if (this.currentPlaceholder) {\r\n                    this.currentPlaceholder.setIsHover(false);\r\n                }\r\n                if (placeholder) {\r\n                    placeholder.setIsHover(true);\r\n                }\r\n                this.currentPlaceholder = placeholder;\r\n            }\r\n        }\r\n    }\r\n    onEnd(interrupt) {\r\n        if (!this.state) {\r\n            throw new Error('Invalid state');\r\n        }\r\n        this.state.finder.destroy();\r\n        this.state = undefined;\r\n        this.view.remove();\r\n        this.designerState.setIsDragging(false);\r\n        let modified = false;\r\n        if (!interrupt && this.currentPlaceholder) {\r\n            if (this.draggedStepComponent) {\r\n                modified = this.stateModifier.tryMove(this.draggedStepComponent.parentSequence, this.draggedStepComponent.step, this.currentPlaceholder.parentSequence, this.currentPlaceholder.index);\r\n            }\r\n            else {\r\n                modified = this.stateModifier.tryInsert(this.step, this.currentPlaceholder.parentSequence, this.currentPlaceholder.index);\r\n            }\r\n        }\r\n        if (!modified) {\r\n            if (this.draggedStepComponent) {\r\n                this.draggedStepComponent.setIsDisabled(false);\r\n            }\r\n            if (this.currentPlaceholder) {\r\n                this.currentPlaceholder.setIsHover(false);\r\n            }\r\n        }\r\n        this.currentPlaceholder = undefined;\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/vector.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/definition.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-context.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/component.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/behaviors/behavior.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/behaviors/drag-step-behavior-view.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/behaviors/placeholder-finder.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-state.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/modifier/state-modifier.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/workspace-controller.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/step-component.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/behaviors/drag-step-behavior.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../core/vector';\r\nimport { Step } from '../definition';\r\nimport { DesignerContext } from '../designer-context';\r\nimport { Behavior } from './behavior';\r\nimport { StepComponent } from '../workspace/step-component';\r\nexport declare class DragStepBehavior implements Behavior {\r\n    private readonly view;\r\n    private readonly workspaceController;\r\n    private readonly designerState;\r\n    private readonly step;\r\n    private readonly stateModifier;\r\n    private readonly draggedStepComponent?;\r\n    static create(designerContext: DesignerContext, step: Step, draggedStepComponent?: StepComponent): DragStepBehavior;\r\n    private state?;\r\n    private currentPlaceholder?;\r\n    private constructor();\r\n    onStart(position: Vector): void;\r\n    onMove(delta: Vector): void;\r\n    onEnd(interrupt: boolean): void;\r\n}\r\n"}}
