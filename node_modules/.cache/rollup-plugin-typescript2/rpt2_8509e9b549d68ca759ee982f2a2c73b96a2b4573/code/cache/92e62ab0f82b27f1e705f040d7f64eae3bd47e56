{"code":"import { KeyboardAction } from '../designer-configuration';\r\nconst ignoreTagNames = ['INPUT', 'TEXTAREA', 'SELECT'];\r\nexport class KeyboardDaemon {\r\n    static create(api, configuration) {\r\n        const controller = new KeyboardDaemon(api.controlBar, configuration);\r\n        document.addEventListener('keyup', controller.onKeyUp, false);\r\n        return controller;\r\n    }\r\n    constructor(controlBarApi, configuration) {\r\n        this.controlBarApi = controlBarApi;\r\n        this.configuration = configuration;\r\n        this.onKeyUp = (e) => {\r\n            const action = detectAction(e);\r\n            if (!action) {\r\n                return;\r\n            }\r\n            if (document.activeElement && ignoreTagNames.includes(document.activeElement.tagName)) {\r\n                return;\r\n            }\r\n            if (this.configuration.canHandleKey && !this.configuration.canHandleKey(action, e)) {\r\n                return;\r\n            }\r\n            const isDeletable = this.controlBarApi.canDelete();\r\n            if (isDeletable) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this.controlBarApi.tryDelete();\r\n            }\r\n        };\r\n    }\r\n    destroy() {\r\n        document.removeEventListener('keyup', this.onKeyUp, false);\r\n    }\r\n}\r\nfunction detectAction(e) {\r\n    if (e.key === 'Backspace' || e.key === 'Delete') {\r\n        return KeyboardAction.delete;\r\n    }\r\n    return null;\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/api/designer-api.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/api/control-bar-api.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-configuration.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/keyboard/keyboard-daemon.d.ts","writeByteOrderMark":false,"text":"import { DesignerApi } from '../api/designer-api';\r\nimport { Daemon } from '../designer-extension';\r\nimport { KeyboardConfiguration } from '../designer-configuration';\r\nexport declare class KeyboardDaemon implements Daemon {\r\n    private readonly controlBarApi;\r\n    private readonly configuration;\r\n    static create(api: DesignerApi, configuration: KeyboardConfiguration): KeyboardDaemon;\r\n    private constructor();\r\n    private readonly onKeyUp;\r\n    destroy(): void;\r\n}\r\n"}}
