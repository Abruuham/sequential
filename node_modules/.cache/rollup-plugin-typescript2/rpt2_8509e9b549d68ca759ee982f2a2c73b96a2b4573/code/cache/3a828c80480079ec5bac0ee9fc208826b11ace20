{"code":"import { ControlBarView } from './control-bar-view';\r\nexport class ControlBar {\r\n    static create(parent, api) {\r\n        const isUndoRedoSupported = api.controlBar.isUndoRedoSupported();\r\n        const view = ControlBarView.create(parent, isUndoRedoSupported);\r\n        const bar = new ControlBar(view, api.controlBar, isUndoRedoSupported);\r\n        view.bindResetButtonClick(() => bar.onResetButtonClicked());\r\n        view.bindZoomInButtonClick(() => bar.onZoomInButtonClicked());\r\n        view.bindZoomOutButtonClick(() => bar.onZoomOutButtonClicked());\r\n        view.bindDisableDragButtonClick(() => bar.onMoveButtonClicked());\r\n        view.bindDeleteButtonClick(() => bar.onDeleteButtonClicked());\r\n        api.controlBar.onStateChanged.subscribe(() => bar.refreshButtons());\r\n        if (isUndoRedoSupported) {\r\n            view.bindUndoButtonClick(() => bar.onUndoButtonClicked());\r\n            view.bindRedoButtonClick(() => bar.onRedoButtonClicked());\r\n        }\r\n        bar.refreshButtons();\r\n        return bar;\r\n    }\r\n    constructor(view, controlBarApi, isUndoRedoSupported) {\r\n        this.view = view;\r\n        this.controlBarApi = controlBarApi;\r\n        this.isUndoRedoSupported = isUndoRedoSupported;\r\n    }\r\n    destroy() {\r\n        //\r\n    }\r\n    onResetButtonClicked() {\r\n        this.controlBarApi.resetViewport();\r\n    }\r\n    onZoomInButtonClicked() {\r\n        this.controlBarApi.zoomIn();\r\n    }\r\n    onZoomOutButtonClicked() {\r\n        this.controlBarApi.zoomOut();\r\n    }\r\n    onMoveButtonClicked() {\r\n        this.controlBarApi.toggleIsDragDisabled();\r\n    }\r\n    onUndoButtonClicked() {\r\n        this.controlBarApi.tryUndo();\r\n    }\r\n    onRedoButtonClicked() {\r\n        this.controlBarApi.tryRedo();\r\n    }\r\n    onDeleteButtonClicked() {\r\n        this.controlBarApi.tryDelete();\r\n    }\r\n    refreshButtons() {\r\n        this.refreshDeleteButtonVisibility();\r\n        this.refreshIsDragDisabled();\r\n        if (this.isUndoRedoSupported) {\r\n            this.refreshUndoRedoAvailability();\r\n        }\r\n    }\r\n    //\r\n    refreshIsDragDisabled() {\r\n        const isDragDisabled = this.controlBarApi.isDragDisabled();\r\n        this.view.setDisableDragButtonDisabled(!isDragDisabled);\r\n    }\r\n    refreshUndoRedoAvailability() {\r\n        const canUndo = this.controlBarApi.canUndo();\r\n        const canRedo = this.controlBarApi.canRedo();\r\n        this.view.setUndoButtonDisabled(!canUndo);\r\n        this.view.setRedoButtonDisabled(!canRedo);\r\n    }\r\n    refreshDeleteButtonVisibility() {\r\n        const canDelete = this.controlBarApi.canDelete();\r\n        this.view.setIsDeleteButtonHidden(!canDelete);\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/control-bar/control-bar-view.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/api/control-bar-api.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/api/designer-api.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/control-bar/control-bar.d.ts","writeByteOrderMark":false,"text":"import { UiComponent } from '../designer-extension';\r\nimport { DesignerApi } from '../api/designer-api';\r\nexport declare class ControlBar implements UiComponent {\r\n    private readonly view;\r\n    private readonly controlBarApi;\r\n    private readonly isUndoRedoSupported;\r\n    static create(parent: HTMLElement, api: DesignerApi): UiComponent;\r\n    private constructor();\r\n    destroy(): void;\r\n    private onResetButtonClicked;\r\n    private onZoomInButtonClicked;\r\n    private onZoomOutButtonClicked;\r\n    private onMoveButtonClicked;\r\n    private onUndoButtonClicked;\r\n    private onRedoButtonClicked;\r\n    private onDeleteButtonClicked;\r\n    private refreshButtons;\r\n    private refreshIsDragDisabled;\r\n    private refreshUndoRedoAvailability;\r\n    private refreshDeleteButtonVisibility;\r\n}\r\n"}}
