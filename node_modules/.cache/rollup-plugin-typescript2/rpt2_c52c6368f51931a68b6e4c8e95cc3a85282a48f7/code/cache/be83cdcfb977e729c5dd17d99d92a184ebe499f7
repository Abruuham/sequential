{"code":"import { Dom, Vector } from '../../core';\r\nconst BADGE_GAP = 4;\r\nexport class Badges {\r\n    static createForStep(stepContext, view, componentContext) {\r\n        const g = createG(view.g);\r\n        const badges = componentContext.services.badges.map(ext => ext.createForStep(g, stepContext, componentContext));\r\n        const position = new Vector(view.width, 0);\r\n        return new Badges(g, position, badges);\r\n    }\r\n    static createForRoot(parentElement, position, componentContext) {\r\n        const g = createG(parentElement);\r\n        const badges = componentContext.services.badges.map(ext => {\r\n            return ext.createForRoot ? ext.createForRoot(g, componentContext) : null;\r\n        });\r\n        return new Badges(g, position, badges);\r\n    }\r\n    constructor(g, position, badges) {\r\n        this.g = g;\r\n        this.position = position;\r\n        this.badges = badges;\r\n    }\r\n    update(result) {\r\n        const count = this.badges.length;\r\n        for (let i = 0; i < count; i++) {\r\n            const badge = this.badges[i];\r\n            if (badge) {\r\n                result[i] = badge.update(result[i]);\r\n            }\r\n        }\r\n        let offsetX = 0;\r\n        let maxHeight = 0;\r\n        let j = 0;\r\n        for (let i = 0; i < count; i++) {\r\n            const badge = this.badges[i];\r\n            if (badge && badge.view) {\r\n                offsetX += j === 0 ? badge.view.width / 2 : badge.view.width;\r\n                maxHeight = Math.max(maxHeight, badge.view.height);\r\n                Dom.translate(badge.view.g, -offsetX, 0);\r\n                offsetX += BADGE_GAP;\r\n                j++;\r\n            }\r\n        }\r\n        Dom.translate(this.g, this.position.x, this.position.y + -maxHeight / 2);\r\n    }\r\n    resolveClick(click) {\r\n        for (const badge of this.badges) {\r\n            const command = badge && badge.resolveClick(click);\r\n            if (command) {\r\n                return command;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\nfunction createG(parentElement) {\r\n    const g = Dom.svg('g', {\r\n        class: 'sqd-badges'\r\n    });\r\n    parentElement.appendChild(g);\r\n    return g;\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/component-context.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/index.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/component.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/workspace/badges/badges.d.ts","writeByteOrderMark":false,"text":"import { ComponentContext } from '../../component-context';\r\nimport { Vector } from '../../core';\r\nimport { StepContext } from '../../designer-extension';\r\nimport { BadgesResult, ClickCommand, ClickDetails, StepComponentView } from '../component';\r\nexport declare class Badges {\r\n    private readonly g;\r\n    private readonly position;\r\n    private readonly badges;\r\n    static createForStep(stepContext: StepContext, view: StepComponentView, componentContext: ComponentContext): Badges;\r\n    static createForRoot(parentElement: SVGGElement, position: Vector, componentContext: ComponentContext): Badges;\r\n    private constructor();\r\n    update(result: BadgesResult): void;\r\n    resolveClick(click: ClickDetails): ClickCommand | null;\r\n}\r\n"}}
