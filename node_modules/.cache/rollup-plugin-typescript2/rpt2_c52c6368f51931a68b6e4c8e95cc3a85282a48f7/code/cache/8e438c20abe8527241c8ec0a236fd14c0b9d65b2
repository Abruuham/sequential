{"code":"import { Dom } from '../core/dom';\r\nimport { readMousePosition, readTouchPosition } from '../core/event-readers';\r\nconst MAX_DELTA_Y = 25;\r\nconst listenerOptions = {\r\n    passive: false\r\n};\r\nexport class ScrollBoxView {\r\n    static create(parent, viewport) {\r\n        const root = Dom.element('div', {\r\n            class: 'sqd-scrollbox'\r\n        });\r\n        parent.appendChild(root);\r\n        const view = new ScrollBoxView(root, viewport);\r\n        window.addEventListener('resize', view.onResize, false);\r\n        root.addEventListener('wheel', e => view.onWheel(e), listenerOptions);\r\n        root.addEventListener('touchstart', e => view.onTouchStart(e), listenerOptions);\r\n        root.addEventListener('mousedown', e => view.onMouseDown(e), false);\r\n        return view;\r\n    }\r\n    constructor(root, viewport) {\r\n        this.root = root;\r\n        this.viewport = viewport;\r\n        this.onResize = () => {\r\n            this.refresh();\r\n        };\r\n        this.onTouchStart = (e) => {\r\n            e.preventDefault();\r\n            this.startScroll(readTouchPosition(e));\r\n        };\r\n        this.onMouseDown = (e) => {\r\n            this.startScroll(readMousePosition(e));\r\n        };\r\n        this.onTouchMove = (e) => {\r\n            e.preventDefault();\r\n            this.moveScroll(readTouchPosition(e));\r\n        };\r\n        this.onMouseMove = (e) => {\r\n            e.preventDefault();\r\n            this.moveScroll(readMousePosition(e));\r\n        };\r\n        this.onTouchEnd = (e) => {\r\n            e.preventDefault();\r\n            this.stopScroll();\r\n        };\r\n        this.onMouseUp = (e) => {\r\n            e.preventDefault();\r\n            this.stopScroll();\r\n        };\r\n    }\r\n    setContent(element) {\r\n        if (this.content) {\r\n            this.root.removeChild(this.content.element);\r\n        }\r\n        element.classList.add('sqd-scrollbox-body');\r\n        this.root.appendChild(element);\r\n        this.reload(element);\r\n    }\r\n    refresh() {\r\n        if (this.content) {\r\n            this.reload(this.content.element);\r\n        }\r\n    }\r\n    destroy() {\r\n        window.removeEventListener('resize', this.onResize, false);\r\n    }\r\n    reload(element) {\r\n        const maxHeightPercent = 0.7;\r\n        const minDistance = 206;\r\n        let height = Math.min(this.viewport.clientHeight * maxHeightPercent, element.clientHeight);\r\n        height = Math.min(height, this.viewport.clientHeight - minDistance);\r\n        this.root.style.height = height + 'px';\r\n        element.style.top = '0px';\r\n        this.content = {\r\n            element,\r\n            height\r\n        };\r\n    }\r\n    onWheel(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        if (this.content) {\r\n            const delta = Math.sign(e.deltaY) * Math.min(Math.abs(e.deltaY), MAX_DELTA_Y);\r\n            const scrollTop = this.getScrollTop();\r\n            this.setScrollTop(scrollTop - delta);\r\n        }\r\n    }\r\n    startScroll(startPosition) {\r\n        if (!this.scroll) {\r\n            window.addEventListener('touchmove', this.onTouchMove, listenerOptions);\r\n            window.addEventListener('mousemove', this.onMouseMove, false);\r\n            window.addEventListener('touchend', this.onTouchEnd, listenerOptions);\r\n            window.addEventListener('mouseup', this.onMouseUp, false);\r\n        }\r\n        this.scroll = {\r\n            startPositionY: startPosition.y,\r\n            startScrollTop: this.getScrollTop()\r\n        };\r\n    }\r\n    moveScroll(position) {\r\n        if (this.scroll) {\r\n            const delta = position.y - this.scroll.startPositionY;\r\n            this.setScrollTop(this.scroll.startScrollTop + delta);\r\n        }\r\n    }\r\n    stopScroll() {\r\n        if (this.scroll) {\r\n            window.removeEventListener('touchmove', this.onTouchMove, listenerOptions);\r\n            window.removeEventListener('mousemove', this.onMouseMove, false);\r\n            window.removeEventListener('touchend', this.onTouchEnd, listenerOptions);\r\n            window.removeEventListener('mouseup', this.onMouseUp, false);\r\n            this.scroll = undefined;\r\n        }\r\n    }\r\n    getScrollTop() {\r\n        if (this.content && this.content.element.style.top) {\r\n            return parseInt(this.content.element.style.top);\r\n        }\r\n        return 0;\r\n    }\r\n    setScrollTop(scrollTop) {\r\n        if (this.content) {\r\n            const max = this.content.element.clientHeight - this.content.height;\r\n            const limited = Math.max(Math.min(scrollTop, 0), -max);\r\n            this.content.element.style.top = limited + 'px';\r\n        }\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/dom.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/event-readers.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/vector.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/toolbox/scrollbox-view.d.ts","writeByteOrderMark":false,"text":"export declare class ScrollBoxView {\r\n    private readonly root;\r\n    private readonly viewport;\r\n    static create(parent: HTMLElement, viewport: HTMLElement): ScrollBoxView;\r\n    private content?;\r\n    private scroll?;\r\n    constructor(root: HTMLElement, viewport: HTMLElement);\r\n    setContent(element: HTMLElement): void;\r\n    refresh(): void;\r\n    destroy(): void;\r\n    private reload;\r\n    private readonly onResize;\r\n    private onWheel;\r\n    private readonly onTouchStart;\r\n    private readonly onMouseDown;\r\n    private readonly onTouchMove;\r\n    private readonly onMouseMove;\r\n    private readonly onTouchEnd;\r\n    private readonly onMouseUp;\r\n    private startScroll;\r\n    private moveScroll;\r\n    private stopScroll;\r\n    private getScrollTop;\r\n    private setScrollTop;\r\n}\r\n"}}
