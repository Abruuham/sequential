{"code":"import { Dom } from '../../core';\r\nimport { Icons } from '../../core/icons';\r\nimport { PlaceholderDirection } from '../component';\r\nexport class RectPlaceholderView {\r\n    static create(parent, width, height, radius, iconSize, direction) {\r\n        const g = Dom.svg('g', {\r\n            visibility: 'hidden',\r\n            class: 'sqd-placeholder'\r\n        });\r\n        parent.appendChild(g);\r\n        const rect = Dom.svg('rect', {\r\n            class: 'sqd-placeholder-rect',\r\n            width,\r\n            height,\r\n            rx: radius,\r\n            ry: radius\r\n        });\r\n        g.appendChild(rect);\r\n        if (direction) {\r\n            const iconD = direction === PlaceholderDirection.in ? Icons.folderIn : Icons.folderOut;\r\n            const icon = Icons.appendPath(g, 'sqd-placeholder-icon-path', iconD, iconSize);\r\n            Dom.translate(icon, (width - iconSize) / 2, (height - iconSize) / 2);\r\n        }\r\n        parent.appendChild(g);\r\n        return new RectPlaceholderView(rect, g);\r\n    }\r\n    constructor(rect, g) {\r\n        this.rect = rect;\r\n        this.g = g;\r\n    }\r\n    setIsHover(isHover) {\r\n        Dom.toggleClass(this.g, isHover, 'sqd-hover');\r\n    }\r\n    setIsVisible(isVisible) {\r\n        Dom.attrs(this.g, {\r\n            visibility: isVisible ? 'visible' : 'hidden'\r\n        });\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/index.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/icons.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/component.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/workspace/placeholder/rect-placeholder-view.d.ts","writeByteOrderMark":false,"text":"import { PlaceholderDirection, PlaceholderView } from '../component';\r\nexport declare class RectPlaceholderView implements PlaceholderView {\r\n    readonly rect: SVGElement;\r\n    readonly g: SVGGElement;\r\n    static create(parent: SVGElement, width: number, height: number, radius: number, iconSize: number, direction: PlaceholderDirection): RectPlaceholderView;\r\n    private constructor();\r\n    setIsHover(isHover: boolean): void;\r\n    setIsVisible(isVisible: boolean): void;\r\n}\r\n"}}
