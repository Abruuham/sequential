{"code":"import { Dom } from '../core/dom';\r\nimport { Icons } from '../core/icons';\r\nexport class ControlBarView {\r\n    static create(parent, isUndoRedoSupported) {\r\n        const root = Dom.element('div', {\r\n            class: 'sqd-control-bar'\r\n        });\r\n        const resetButton = createButton(Icons.center, 'Reset view');\r\n        root.appendChild(resetButton);\r\n        const zoomInButton = createButton(Icons.zoomIn, 'Zoom in');\r\n        root.appendChild(zoomInButton);\r\n        const zoomOutButton = createButton(Icons.zoomOut, 'Zoom out');\r\n        root.appendChild(zoomOutButton);\r\n        let undoButton = null;\r\n        let redoButton = null;\r\n        if (isUndoRedoSupported) {\r\n            undoButton = createButton(Icons.undo, 'Undo');\r\n            root.appendChild(undoButton);\r\n            redoButton = createButton(Icons.redo, 'Redo');\r\n            root.appendChild(redoButton);\r\n        }\r\n        const disableDragButton = createButton(Icons.move, 'Turn on/off drag and drop');\r\n        disableDragButton.classList.add('sqd-disabled');\r\n        root.appendChild(disableDragButton);\r\n        const deleteButton = createButton(Icons.delete, 'Delete selected step');\r\n        deleteButton.classList.add('sqd-delete');\r\n        deleteButton.classList.add('sqd-hidden');\r\n        root.appendChild(deleteButton);\r\n        parent.appendChild(root);\r\n        return new ControlBarView(resetButton, zoomInButton, zoomOutButton, undoButton, redoButton, disableDragButton, deleteButton);\r\n    }\r\n    constructor(resetButton, zoomInButton, zoomOutButton, undoButton, redoButton, disableDragButton, deleteButton) {\r\n        this.resetButton = resetButton;\r\n        this.zoomInButton = zoomInButton;\r\n        this.zoomOutButton = zoomOutButton;\r\n        this.undoButton = undoButton;\r\n        this.redoButton = redoButton;\r\n        this.disableDragButton = disableDragButton;\r\n        this.deleteButton = deleteButton;\r\n    }\r\n    bindResetButtonClick(handler) {\r\n        bindClick(this.resetButton, handler);\r\n    }\r\n    bindZoomInButtonClick(handler) {\r\n        bindClick(this.zoomInButton, handler);\r\n    }\r\n    bindZoomOutButtonClick(handler) {\r\n        bindClick(this.zoomOutButton, handler);\r\n    }\r\n    bindUndoButtonClick(handler) {\r\n        if (!this.undoButton) {\r\n            throw new Error('Undo button is disabled');\r\n        }\r\n        bindClick(this.undoButton, handler);\r\n    }\r\n    bindRedoButtonClick(handler) {\r\n        if (!this.redoButton) {\r\n            throw new Error('Redo button is disabled');\r\n        }\r\n        bindClick(this.redoButton, handler);\r\n    }\r\n    bindDisableDragButtonClick(handler) {\r\n        bindClick(this.disableDragButton, handler);\r\n    }\r\n    bindDeleteButtonClick(handler) {\r\n        bindClick(this.deleteButton, handler);\r\n    }\r\n    setIsDeleteButtonHidden(isHidden) {\r\n        Dom.toggleClass(this.deleteButton, isHidden, 'sqd-hidden');\r\n    }\r\n    setDisableDragButtonDisabled(isDisabled) {\r\n        Dom.toggleClass(this.disableDragButton, isDisabled, 'sqd-disabled');\r\n    }\r\n    setUndoButtonDisabled(isDisabled) {\r\n        if (!this.undoButton) {\r\n            throw new Error('Undo button is disabled');\r\n        }\r\n        Dom.toggleClass(this.undoButton, isDisabled, 'sqd-disabled');\r\n    }\r\n    setRedoButtonDisabled(isDisabled) {\r\n        if (!this.redoButton) {\r\n            throw new Error('Redo button is disabled');\r\n        }\r\n        Dom.toggleClass(this.redoButton, isDisabled, 'sqd-disabled');\r\n    }\r\n}\r\nfunction bindClick(element, handler) {\r\n    element.addEventListener('click', e => {\r\n        e.preventDefault();\r\n        handler();\r\n    }, false);\r\n}\r\nfunction createButton(d, title) {\r\n    const button = Dom.element('div', {\r\n        class: 'sqd-control-bar-button',\r\n        title\r\n    });\r\n    const icon = Icons.createSvg('sqd-control-bar-button-icon', d);\r\n    button.appendChild(icon);\r\n    return button;\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/dom.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/icons.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/control-bar/control-bar-view.d.ts","writeByteOrderMark":false,"text":"export declare class ControlBarView {\r\n    private readonly resetButton;\r\n    private readonly zoomInButton;\r\n    private readonly zoomOutButton;\r\n    private readonly undoButton;\r\n    private readonly redoButton;\r\n    private readonly disableDragButton;\r\n    private readonly deleteButton;\r\n    static create(parent: HTMLElement, isUndoRedoSupported: boolean): ControlBarView;\r\n    private constructor();\r\n    bindResetButtonClick(handler: () => void): void;\r\n    bindZoomInButtonClick(handler: () => void): void;\r\n    bindZoomOutButtonClick(handler: () => void): void;\r\n    bindUndoButtonClick(handler: () => void): void;\r\n    bindRedoButtonClick(handler: () => void): void;\r\n    bindDisableDragButtonClick(handler: () => void): void;\r\n    bindDeleteButtonClick(handler: () => void): void;\r\n    setIsDeleteButtonHidden(isHidden: boolean): void;\r\n    setDisableDragButtonDisabled(isDisabled: boolean): void;\r\n    setUndoButtonDisabled(isDisabled: boolean): void;\r\n    setRedoButtonDisabled(isDisabled: boolean): void;\r\n}\r\n"}}
