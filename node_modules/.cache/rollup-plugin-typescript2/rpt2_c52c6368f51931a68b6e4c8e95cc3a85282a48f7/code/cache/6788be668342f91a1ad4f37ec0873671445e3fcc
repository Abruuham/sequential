{"code":"import { SimpleEvent } from './core/simple-event';\r\nimport { Vector } from './core/vector';\r\nimport { DefinitionChangeType } from './designer-configuration';\r\nexport class DesignerState {\r\n    constructor(definition, isReadonly, isToolboxCollapsed, isEditorCollapsed) {\r\n        this.definition = definition;\r\n        this.isReadonly = isReadonly;\r\n        this.isToolboxCollapsed = isToolboxCollapsed;\r\n        this.isEditorCollapsed = isEditorCollapsed;\r\n        this.onViewportChanged = new SimpleEvent();\r\n        this.onSelectedStepIdChanged = new SimpleEvent();\r\n        this.onFolderPathChanged = new SimpleEvent();\r\n        this.onIsReadonlyChanged = new SimpleEvent();\r\n        this.onIsDraggingChanged = new SimpleEvent();\r\n        this.onIsDragDisabledChanged = new SimpleEvent();\r\n        this.onDefinitionChanged = new SimpleEvent();\r\n        this.onIsToolboxCollapsedChanged = new SimpleEvent();\r\n        this.onIsEditorCollapsedChanged = new SimpleEvent();\r\n        this.viewport = {\r\n            position: new Vector(0, 0),\r\n            scale: 1\r\n        };\r\n        this.selectedStepId = null;\r\n        this.folderPath = [];\r\n        this.isDragging = false;\r\n        this.isDragDisabled = false;\r\n    }\r\n    setSelectedStepId(stepId) {\r\n        if (this.selectedStepId !== stepId) {\r\n            this.selectedStepId = stepId;\r\n            this.onSelectedStepIdChanged.forward(stepId);\r\n        }\r\n    }\r\n    pushStepIdToFolderPath(stepId) {\r\n        this.folderPath.push(stepId);\r\n        this.onFolderPathChanged.forward(this.folderPath);\r\n    }\r\n    setFolderPath(path) {\r\n        this.folderPath = path;\r\n        this.onFolderPathChanged.forward(path);\r\n    }\r\n    tryGetLastStepIdFromFolderPath() {\r\n        return this.folderPath.length > 0 ? this.folderPath[this.folderPath.length - 1] : null;\r\n    }\r\n    setDefinition(definition) {\r\n        this.definition = definition;\r\n        this.notifyDefinitionChanged(DefinitionChangeType.rootReplaced, null);\r\n    }\r\n    notifyDefinitionChanged(changeType, stepId) {\r\n        this.onDefinitionChanged.forward({ changeType, stepId });\r\n    }\r\n    setViewport(viewport) {\r\n        this.viewport = viewport;\r\n        this.onViewportChanged.forward(viewport);\r\n    }\r\n    setIsReadonly(isReadonly) {\r\n        if (this.isReadonly !== isReadonly) {\r\n            this.isReadonly = isReadonly;\r\n            this.onIsReadonlyChanged.forward(isReadonly);\r\n        }\r\n    }\r\n    setIsDragging(isDragging) {\r\n        if (this.isDragging !== isDragging) {\r\n            this.isDragging = isDragging;\r\n            this.onIsDraggingChanged.forward(isDragging);\r\n        }\r\n    }\r\n    toggleIsDragDisabled() {\r\n        this.isDragDisabled = !this.isDragDisabled;\r\n        this.onIsDragDisabledChanged.forward(this.isDragDisabled);\r\n    }\r\n    setIsToolboxCollapsed(isCollapsed) {\r\n        if (this.isToolboxCollapsed !== isCollapsed) {\r\n            this.isToolboxCollapsed = isCollapsed;\r\n            this.onIsToolboxCollapsedChanged.forward(isCollapsed);\r\n        }\r\n    }\r\n    setIsEditorCollapsed(isCollapsed) {\r\n        if (this.isEditorCollapsed !== isCollapsed) {\r\n            this.isEditorCollapsed = isCollapsed;\r\n            this.onIsEditorCollapsedChanged.forward(isCollapsed);\r\n        }\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/simple-event.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/vector.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/definition.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-configuration.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-extension.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/designer-state.d.ts","writeByteOrderMark":false,"text":"import { SimpleEvent } from './core/simple-event';\r\nimport { Definition } from './definition';\r\nimport { DefinitionChangeType } from './designer-configuration';\r\nimport { Viewport } from './designer-extension';\r\nexport interface DefinitionChangedEvent {\r\n    changeType: DefinitionChangeType;\r\n    stepId: string | null;\r\n}\r\nexport declare class DesignerState {\r\n    definition: Definition;\r\n    isReadonly: boolean;\r\n    isToolboxCollapsed: boolean;\r\n    isEditorCollapsed: boolean;\r\n    readonly onViewportChanged: SimpleEvent<Viewport>;\r\n    readonly onSelectedStepIdChanged: SimpleEvent<string | null>;\r\n    readonly onFolderPathChanged: SimpleEvent<string[]>;\r\n    readonly onIsReadonlyChanged: SimpleEvent<boolean>;\r\n    readonly onIsDraggingChanged: SimpleEvent<boolean>;\r\n    readonly onIsDragDisabledChanged: SimpleEvent<boolean>;\r\n    readonly onDefinitionChanged: SimpleEvent<DefinitionChangedEvent>;\r\n    readonly onIsToolboxCollapsedChanged: SimpleEvent<boolean>;\r\n    readonly onIsEditorCollapsedChanged: SimpleEvent<boolean>;\r\n    viewport: Viewport;\r\n    selectedStepId: string | null;\r\n    folderPath: string[];\r\n    isDragging: boolean;\r\n    isDragDisabled: boolean;\r\n    constructor(definition: Definition, isReadonly: boolean, isToolboxCollapsed: boolean, isEditorCollapsed: boolean);\r\n    setSelectedStepId(stepId: string | null): void;\r\n    pushStepIdToFolderPath(stepId: string): void;\r\n    setFolderPath(path: string[]): void;\r\n    tryGetLastStepIdFromFolderPath(): string | null;\r\n    setDefinition(definition: Definition): void;\r\n    notifyDefinitionChanged(changeType: DefinitionChangeType, stepId: string | null): void;\r\n    setViewport(viewport: Viewport): void;\r\n    setIsReadonly(isReadonly: boolean): void;\r\n    setIsDragging(isDragging: boolean): void;\r\n    toggleIsDragDisabled(): void;\r\n    setIsToolboxCollapsed(isCollapsed: boolean): void;\r\n    setIsEditorCollapsed(isCollapsed: boolean): void;\r\n}\r\n"}}
