{"code":"import { readMousePosition, readTouchPosition } from '../core/event-readers';\r\nconst notInitializedError = 'State is not initialized';\r\nconst nonPassiveOptions = {\r\n    passive: false\r\n};\r\nexport class BehaviorController {\r\n    constructor() {\r\n        this.onMouseMove = (e) => {\r\n            e.preventDefault();\r\n            this.move(readMousePosition(e));\r\n        };\r\n        this.onTouchMove = (e) => {\r\n            e.preventDefault();\r\n            this.move(readTouchPosition(e));\r\n        };\r\n        this.onMouseUp = (e) => {\r\n            e.preventDefault();\r\n            this.stop(false, e.target);\r\n        };\r\n        this.onTouchEnd = (e) => {\r\n            var _a;\r\n            e.preventDefault();\r\n            if (!this.state) {\r\n                throw new Error(notInitializedError);\r\n            }\r\n            const position = (_a = this.state.lastPosition) !== null && _a !== void 0 ? _a : this.state.startPosition;\r\n            const element = document.elementFromPoint(position.x, position.y);\r\n            this.stop(false, element);\r\n        };\r\n        this.onTouchStart = (e) => {\r\n            e.preventDefault();\r\n            if (e.touches.length !== 1) {\r\n                this.stop(true, null);\r\n            }\r\n        };\r\n    }\r\n    start(startPosition, behavior) {\r\n        if (this.state) {\r\n            this.stop(true, null);\r\n            return;\r\n        }\r\n        this.state = {\r\n            startPosition,\r\n            behavior\r\n        };\r\n        behavior.onStart(this.state.startPosition);\r\n        window.addEventListener('mousemove', this.onMouseMove, false);\r\n        window.addEventListener('touchmove', this.onTouchMove, nonPassiveOptions);\r\n        window.addEventListener('mouseup', this.onMouseUp, false);\r\n        window.addEventListener('touchend', this.onTouchEnd, nonPassiveOptions);\r\n        window.addEventListener('touchstart', this.onTouchStart, nonPassiveOptions);\r\n    }\r\n    move(position) {\r\n        if (!this.state) {\r\n            throw new Error(notInitializedError);\r\n        }\r\n        this.state.lastPosition = position;\r\n        const delta = this.state.startPosition.subtract(position);\r\n        const newBehavior = this.state.behavior.onMove(delta);\r\n        if (newBehavior) {\r\n            this.state.behavior.onEnd(true, null);\r\n            this.state.behavior = newBehavior;\r\n            this.state.startPosition = position;\r\n            this.state.behavior.onStart(this.state.startPosition);\r\n        }\r\n    }\r\n    stop(interrupt, element) {\r\n        if (!this.state) {\r\n            throw new Error(notInitializedError);\r\n        }\r\n        window.removeEventListener('mousemove', this.onMouseMove, false);\r\n        window.removeEventListener('touchmove', this.onTouchMove, nonPassiveOptions);\r\n        window.removeEventListener('mouseup', this.onMouseUp, false);\r\n        window.removeEventListener('touchend', this.onTouchEnd, nonPassiveOptions);\r\n        window.removeEventListener('touchstart', this.onTouchStart, nonPassiveOptions);\r\n        this.state.behavior.onEnd(interrupt, element);\r\n        this.state = undefined;\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/vector.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/behaviors/behavior.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/event-readers.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/behaviors/behavior-controller.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../core/vector';\r\nimport { Behavior } from './behavior';\r\nexport declare class BehaviorController {\r\n    private state?;\r\n    start(startPosition: Vector, behavior: Behavior): void;\r\n    private readonly onMouseMove;\r\n    private readonly onTouchMove;\r\n    private readonly onMouseUp;\r\n    private readonly onTouchEnd;\r\n    private readonly onTouchStart;\r\n    private move;\r\n    private stop;\r\n}\r\n"}}
