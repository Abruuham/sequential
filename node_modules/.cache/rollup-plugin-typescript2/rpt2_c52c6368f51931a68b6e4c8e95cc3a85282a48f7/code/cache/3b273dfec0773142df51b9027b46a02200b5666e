{"code":"import { Uid } from '../core';\r\nimport { SequenceModifier } from './sequence-modifier';\r\nimport { StepDuplicator } from '../core/step-duplicator';\r\nimport { DefinitionChangeType } from '../designer-configuration';\r\nimport { FolderPathDefinitionModifierDependency } from './folder-path-definition-modifier-dependency';\r\nimport { SelectedStepIdDefinitionModifierDependency } from './selected-step-id-definition-modifier-dependency';\r\nexport class StateModifier {\r\n    static create(definitionWalker, state, configuration) {\r\n        const dependencies = [];\r\n        dependencies.push(new SelectedStepIdDefinitionModifierDependency(state, definitionWalker));\r\n        dependencies.push(new FolderPathDefinitionModifierDependency(state, definitionWalker));\r\n        return new StateModifier(definitionWalker, state, configuration, dependencies);\r\n    }\r\n    constructor(definitionWalker, state, configuration, dependencies) {\r\n        this.definitionWalker = definitionWalker;\r\n        this.state = state;\r\n        this.configuration = configuration;\r\n        this.dependencies = dependencies;\r\n    }\r\n    addDependency(dependency) {\r\n        this.dependencies.push(dependency);\r\n    }\r\n    isSelectable(step, parentSequence) {\r\n        return this.configuration.steps.isSelectable ? this.configuration.steps.isSelectable(step, parentSequence) : true;\r\n    }\r\n    trySelectStep(step, parentSequence) {\r\n        if (this.isSelectable(step, parentSequence)) {\r\n            this.state.setSelectedStepId(step.id);\r\n        }\r\n    }\r\n    trySelectStepById(stepId) {\r\n        if (this.configuration.steps.isSelectable) {\r\n            const result = this.definitionWalker.getParentSequence(this.state.definition, stepId);\r\n            this.trySelectStep(result.step, result.parentSequence);\r\n        }\r\n        else {\r\n            this.state.setSelectedStepId(stepId);\r\n        }\r\n    }\r\n    isDeletable(stepId) {\r\n        if (this.configuration.steps.isDeletable) {\r\n            const result = this.definitionWalker.getParentSequence(this.state.definition, stepId);\r\n            return this.configuration.steps.isDeletable(result.step, result.parentSequence);\r\n        }\r\n        return true;\r\n    }\r\n    tryDelete(stepId) {\r\n        const result = this.definitionWalker.getParentSequence(this.state.definition, stepId);\r\n        const canDeleteStep = this.configuration.steps.canDeleteStep\r\n            ? this.configuration.steps.canDeleteStep(result.step, result.parentSequence)\r\n            : true;\r\n        if (!canDeleteStep) {\r\n            return false;\r\n        }\r\n        SequenceModifier.deleteStep(result.step, result.parentSequence);\r\n        this.state.notifyDefinitionChanged(DefinitionChangeType.stepDeleted, result.step.id);\r\n        this.updateDependencies();\r\n        return true;\r\n    }\r\n    tryInsert(step, targetSequence, targetIndex) {\r\n        const canInsertStep = this.configuration.steps.canInsertStep\r\n            ? this.configuration.steps.canInsertStep(step, targetSequence, targetIndex)\r\n            : true;\r\n        if (!canInsertStep) {\r\n            return false;\r\n        }\r\n        SequenceModifier.insertStep(step, targetSequence, targetIndex);\r\n        this.state.notifyDefinitionChanged(DefinitionChangeType.stepInserted, step.id);\r\n        if (!this.configuration.steps.isAutoSelectDisabled) {\r\n            this.trySelectStepById(step.id);\r\n        }\r\n        return true;\r\n    }\r\n    isDraggable(step, parentSequence) {\r\n        return this.configuration.steps.isDraggable ? this.configuration.steps.isDraggable(step, parentSequence) : true;\r\n    }\r\n    tryMove(sourceSequence, step, targetSequence, targetIndex) {\r\n        const apply = SequenceModifier.tryMoveStep(sourceSequence, step, targetSequence, targetIndex);\r\n        if (!apply) {\r\n            return false;\r\n        }\r\n        const canMoveStep = this.configuration.steps.canMoveStep\r\n            ? this.configuration.steps.canMoveStep(sourceSequence, step, targetSequence, targetIndex)\r\n            : true;\r\n        if (!canMoveStep) {\r\n            return false;\r\n        }\r\n        apply();\r\n        this.state.notifyDefinitionChanged(DefinitionChangeType.stepMoved, step.id);\r\n        if (!this.configuration.steps.isAutoSelectDisabled) {\r\n            this.trySelectStep(step, targetSequence);\r\n        }\r\n        return true;\r\n    }\r\n    isDuplicable(step, parentSequence) {\r\n        return this.configuration.steps.isDuplicable ? this.configuration.steps.isDuplicable(step, parentSequence) : false;\r\n    }\r\n    tryDuplicate(step, parentSequence) {\r\n        const uidGenerator = this.configuration.uidGenerator ? this.configuration.uidGenerator : Uid.next;\r\n        const duplicator = new StepDuplicator(uidGenerator, this.definitionWalker);\r\n        const index = parentSequence.indexOf(step);\r\n        const newStep = duplicator.duplicate(step);\r\n        return this.tryInsert(newStep, parentSequence, index + 1);\r\n    }\r\n    replaceDefinition(definition) {\r\n        if (!definition) {\r\n            throw new Error('Definition is empty');\r\n        }\r\n        this.state.setDefinition(definition);\r\n        this.updateDependencies();\r\n    }\r\n    updateDependencies() {\r\n        this.dependencies.forEach(dependency => dependency.update());\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/index.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/modifier/sequence-modifier.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/step-duplicator.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/definition.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-configuration.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-state.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/modifier/state-modifier-dependency.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/modifier/folder-path-definition-modifier-dependency.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/modifier/selected-step-id-definition-modifier-dependency.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/modifier/state-modifier.d.ts","writeByteOrderMark":false,"text":"import { Definition, DefinitionWalker, Sequence, Step } from '../definition';\r\nimport { DesignerConfiguration } from '../designer-configuration';\r\nimport { DesignerState } from '../designer-state';\r\nimport { StateModifierDependency } from './state-modifier-dependency';\r\nexport declare class StateModifier {\r\n    private readonly definitionWalker;\r\n    private readonly state;\r\n    private readonly configuration;\r\n    private readonly dependencies;\r\n    static create(definitionWalker: DefinitionWalker, state: DesignerState, configuration: DesignerConfiguration): StateModifier;\r\n    constructor(definitionWalker: DefinitionWalker, state: DesignerState, configuration: DesignerConfiguration, dependencies: StateModifierDependency[]);\r\n    addDependency(dependency: StateModifierDependency): void;\r\n    isSelectable(step: Step, parentSequence: Sequence): boolean;\r\n    trySelectStep(step: Step, parentSequence: Sequence): void;\r\n    trySelectStepById(stepId: string): void;\r\n    isDeletable(stepId: string): boolean;\r\n    tryDelete(stepId: string): boolean;\r\n    tryInsert(step: Step, targetSequence: Sequence, targetIndex: number): boolean;\r\n    isDraggable(step: Step, parentSequence: Sequence): boolean;\r\n    tryMove(sourceSequence: Sequence, step: Step, targetSequence: Sequence, targetIndex: number): boolean;\r\n    isDuplicable(step: Step, parentSequence: Sequence): boolean;\r\n    tryDuplicate(step: Step, parentSequence: Sequence): boolean;\r\n    replaceDefinition(definition: Definition): void;\r\n    updateDependencies(): void;\r\n}\r\n"}}
