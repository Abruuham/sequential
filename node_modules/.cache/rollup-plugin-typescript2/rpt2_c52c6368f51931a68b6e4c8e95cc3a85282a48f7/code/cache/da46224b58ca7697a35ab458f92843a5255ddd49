{"code":"import { Dom } from '../../core/dom';\r\nimport { Vector } from '../../core/vector';\r\nimport { JoinView } from '../common-views/join-view';\r\nexport class DefaultSequenceComponentView {\r\n    static create(parent, sequenceContext, componentContext) {\r\n        const phWidth = componentContext.services.placeholder.gapSize.x;\r\n        const phHeight = componentContext.services.placeholder.gapSize.y;\r\n        const { sequence } = sequenceContext;\r\n        const g = Dom.svg('g');\r\n        parent.appendChild(g);\r\n        const components = [];\r\n        for (let index = 0; index < sequence.length; index++) {\r\n            const stepContext = {\r\n                parentSequence: sequenceContext.sequence,\r\n                step: sequence[index],\r\n                depth: sequenceContext.depth,\r\n                position: index,\r\n                isInputConnected: index === 0 ? sequenceContext.isInputConnected : components[index - 1].hasOutput,\r\n                isOutputConnected: index === sequence.length - 1 ? sequenceContext.isOutputConnected : true\r\n            };\r\n            components[index] = componentContext.stepComponentFactory.create(g, stepContext, componentContext);\r\n        }\r\n        let joinX;\r\n        let totalWidth;\r\n        if (components.length > 0) {\r\n            const restWidth = Math.max(...components.map(c => c.view.width - c.view.joinX));\r\n            joinX = Math.max(...components.map(c => c.view.joinX));\r\n            totalWidth = joinX + restWidth;\r\n        }\r\n        else {\r\n            joinX = phWidth / 2;\r\n            totalWidth = phWidth;\r\n        }\r\n        let offsetY = phHeight;\r\n        const placeholders = [];\r\n        for (let i = 0; i < components.length; i++) {\r\n            const component = components[i];\r\n            const offsetX = joinX - component.view.joinX;\r\n            if ((i === 0 && sequenceContext.isInputConnected) || (i > 0 && components[i - 1].hasOutput)) {\r\n                JoinView.createStraightJoin(g, new Vector(joinX, offsetY - phHeight), phHeight);\r\n            }\r\n            if (componentContext.placeholderController.canCreate(sequence, i)) {\r\n                const ph = componentContext.services.placeholder.createForGap(g, sequence, i);\r\n                Dom.translate(ph.view.g, joinX - phWidth / 2, offsetY - phHeight);\r\n                placeholders.push(ph);\r\n            }\r\n            Dom.translate(component.view.g, offsetX, offsetY);\r\n            offsetY += component.view.height + phHeight;\r\n        }\r\n        if (sequenceContext.isOutputConnected && (components.length === 0 || components[components.length - 1].hasOutput)) {\r\n            JoinView.createStraightJoin(g, new Vector(joinX, offsetY - phHeight), phHeight);\r\n        }\r\n        const newIndex = components.length;\r\n        if (componentContext.placeholderController.canCreate(sequence, newIndex)) {\r\n            const ph = componentContext.services.placeholder.createForGap(g, sequence, newIndex);\r\n            Dom.translate(ph.view.g, joinX - phWidth / 2, offsetY - phHeight);\r\n            placeholders.push(ph);\r\n        }\r\n        return new DefaultSequenceComponentView(g, totalWidth, offsetY, joinX, placeholders, components);\r\n    }\r\n    constructor(g, width, height, joinX, placeholders, components) {\r\n        this.g = g;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.joinX = joinX;\r\n        this.placeholders = placeholders;\r\n        this.components = components;\r\n    }\r\n    setIsDragging(isDragging) {\r\n        this.placeholders.forEach(placeholder => {\r\n            placeholder.setIsVisible(isDragging);\r\n        });\r\n    }\r\n    hasOutput() {\r\n        if (this.components.length > 0) {\r\n            return this.components[this.components.length - 1].hasOutput;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/dom.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/vector.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/common-views/join-view.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/component.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/component-context.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/step-component.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/workspace/sequence/default-sequence-component-view.d.ts","writeByteOrderMark":false,"text":"import { ComponentView, Placeholder } from '../component';\r\nimport { ComponentContext } from '../../component-context';\r\nimport { SequenceContext } from '../../designer-extension';\r\nimport { StepComponent } from '../step-component';\r\nexport declare class DefaultSequenceComponentView implements ComponentView {\r\n    readonly g: SVGGElement;\r\n    readonly width: number;\r\n    readonly height: number;\r\n    readonly joinX: number;\r\n    readonly placeholders: Placeholder[];\r\n    readonly components: StepComponent[];\r\n    static create(parent: SVGElement, sequenceContext: SequenceContext, componentContext: ComponentContext): DefaultSequenceComponentView;\r\n    private constructor();\r\n    setIsDragging(isDragging: boolean): void;\r\n    hasOutput(): boolean;\r\n}\r\n"}}
