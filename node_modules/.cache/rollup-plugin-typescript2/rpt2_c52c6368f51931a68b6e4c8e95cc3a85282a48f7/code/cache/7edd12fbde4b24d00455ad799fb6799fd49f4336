{"code":"import { race } from '../core';\r\nimport { DefinitionChangeType } from '../designer-configuration';\r\nexport class EditorRenderer {\r\n    static create(state, selectedStepIdProvider, definitionWalker, handler) {\r\n        const raceEvent = race(0, state.onDefinitionChanged, selectedStepIdProvider.onSelectedStepIdChanged, state.onIsReadonlyChanged);\r\n        const listener = new EditorRenderer(state, selectedStepIdProvider, definitionWalker, handler, raceEvent);\r\n        raceEvent.subscribe(listener.raceEventHandler);\r\n        listener.renderIfStepChanged(selectedStepIdProvider.selectedStepId);\r\n        return listener;\r\n    }\r\n    constructor(state, selectedStepIdProvider, definitionWalker, handler, raceEvent) {\r\n        this.state = state;\r\n        this.selectedStepIdProvider = selectedStepIdProvider;\r\n        this.definitionWalker = definitionWalker;\r\n        this.handler = handler;\r\n        this.raceEvent = raceEvent;\r\n        this.currentStepId = undefined;\r\n        this.raceEventHandler = ([definitionChanged, selectedStepId, isReadonlyChanged]) => {\r\n            if (isReadonlyChanged !== undefined) {\r\n                this.render(this.selectedStepIdProvider.selectedStepId);\r\n            }\r\n            else if (definitionChanged) {\r\n                if (definitionChanged.changeType === DefinitionChangeType.rootReplaced) {\r\n                    this.render(this.selectedStepIdProvider.selectedStepId);\r\n                }\r\n                else {\r\n                    this.renderIfStepChanged(this.selectedStepIdProvider.selectedStepId);\r\n                }\r\n            }\r\n            else if (selectedStepId !== undefined) {\r\n                this.renderIfStepChanged(selectedStepId);\r\n            }\r\n        };\r\n    }\r\n    destroy() {\r\n        this.raceEvent.unsubscribe(this.raceEventHandler);\r\n    }\r\n    render(stepId) {\r\n        const step = stepId ? this.definitionWalker.getById(this.state.definition, stepId) : null;\r\n        this.currentStepId = stepId;\r\n        this.handler(step);\r\n    }\r\n    renderIfStepChanged(stepId) {\r\n        if (this.currentStepId !== stepId) {\r\n            this.render(stepId);\r\n        }\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/definition.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/index.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-state.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-configuration.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/api/editor-api.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/api/editor-renderer.d.ts","writeByteOrderMark":false,"text":"import { DefinitionWalker, Step } from '../definition';\r\nimport { DesignerState } from '../designer-state';\r\nimport { SelectedStepIdProvider } from './editor-api';\r\nexport type EditorRendererHandler = (step: Step | null) => void;\r\nexport declare class EditorRenderer {\r\n    private readonly state;\r\n    private readonly selectedStepIdProvider;\r\n    private readonly definitionWalker;\r\n    private readonly handler;\r\n    private readonly raceEvent;\r\n    static create(state: DesignerState, selectedStepIdProvider: SelectedStepIdProvider, definitionWalker: DefinitionWalker, handler: EditorRendererHandler): EditorRenderer;\r\n    private currentStepId;\r\n    private constructor();\r\n    destroy(): void;\r\n    private render;\r\n    private renderIfStepChanged;\r\n    private readonly raceEventHandler;\r\n}\r\n"}}
