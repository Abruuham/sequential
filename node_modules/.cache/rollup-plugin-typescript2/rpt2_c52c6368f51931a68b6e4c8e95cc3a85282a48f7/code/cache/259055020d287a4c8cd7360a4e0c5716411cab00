{"code":"import { Dom } from '../../core/dom';\r\nexport class JoinView {\r\n    static createStraightJoin(parent, start, height) {\r\n        const join = Dom.svg('line', {\r\n            class: 'sqd-join',\r\n            x1: start.x,\r\n            y1: start.y,\r\n            x2: start.x,\r\n            y2: start.y + height\r\n        });\r\n        parent.insertBefore(join, parent.firstChild);\r\n    }\r\n    static createJoins(parent, start, targets) {\r\n        const firstTarget = targets[0];\r\n        const h = Math.abs(firstTarget.y - start.y) / 2; // half height\r\n        const y = Math.sign(firstTarget.y - start.y); // y direction\r\n        switch (targets.length) {\r\n            case 1:\r\n                if (start.x === targets[0].x) {\r\n                    JoinView.createStraightJoin(parent, start, firstTarget.y * y);\r\n                }\r\n                else {\r\n                    appendCurvedJoins(parent, start, targets, h, y);\r\n                }\r\n                break;\r\n            case 2:\r\n                appendCurvedJoins(parent, start, targets, h, y);\r\n                break;\r\n            default:\r\n                {\r\n                    const f = targets[0]; // first\r\n                    const l = targets[targets.length - 1]; // last\r\n                    appendJoin(parent, `M ${f.x} ${f.y} q ${h * 0.3} ${h * -y * 0.8} ${h} ${h * -y} ` +\r\n                        `l ${l.x - f.x - h * 2} 0 q ${h * 0.8} ${-h * -y * 0.3} ${h} ${-h * -y}`);\r\n                    for (let i = 1; i < targets.length - 1; i++) {\r\n                        JoinView.createStraightJoin(parent, targets[i], h * -y);\r\n                    }\r\n                    JoinView.createStraightJoin(parent, start, h * y);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\nfunction appendCurvedJoins(parent, start, targets, h, y) {\r\n    for (const target of targets) {\r\n        const l = Math.abs(target.x - start.x) - h * 2; // line size\r\n        const x = Math.sign(target.x - start.x); // x direction\r\n        appendJoin(parent, `M ${start.x} ${start.y} q ${x * h * 0.3} ${y * h * 0.8} ${x * h} ${y * h} ` +\r\n            `l ${x * l} 0 q ${x * h * 0.7} ${y * h * 0.2} ${x * h} ${y * h}`);\r\n    }\r\n}\r\nfunction appendJoin(parent, d) {\r\n    const join = Dom.svg('path', {\r\n        class: 'sqd-join',\r\n        fill: 'none',\r\n        d\r\n    });\r\n    parent.insertBefore(join, parent.firstChild);\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/dom.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/vector.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/workspace/common-views/join-view.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../../core/vector';\r\nexport declare class JoinView {\r\n    static createStraightJoin(parent: SVGElement, start: Vector, height: number): void;\r\n    static createJoins(parent: SVGElement, start: Vector, targets: Vector[]): void;\r\n}\r\n"}}
