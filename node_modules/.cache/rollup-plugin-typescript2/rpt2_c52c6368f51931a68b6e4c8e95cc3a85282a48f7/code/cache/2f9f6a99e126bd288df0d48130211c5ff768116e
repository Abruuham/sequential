{"code":"import { SimpleEvent } from './simple-event';\r\nexport function race(timeout, a, b, c) {\r\n    const value = [undefined, undefined, undefined];\r\n    const result = new SimpleEvent();\r\n    let scheduled = false;\r\n    function forward() {\r\n        if (scheduled) {\r\n            return;\r\n        }\r\n        scheduled = true;\r\n        setTimeout(() => {\r\n            try {\r\n                result.forward(value);\r\n            }\r\n            finally {\r\n                scheduled = false;\r\n                value.fill(undefined);\r\n            }\r\n        }, timeout);\r\n    }\r\n    [a, b, c]\r\n        .filter(e => e)\r\n        .forEach((e, index) => {\r\n        e.subscribe(v => {\r\n            value[index] = v;\r\n            forward();\r\n        });\r\n    });\r\n    return result;\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/simple-event.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/core/simple-event-race.d.ts","writeByteOrderMark":false,"text":"import { SimpleEvent } from './simple-event';\r\nexport declare function race<A, B, C>(timeout: number, a: SimpleEvent<A>, b: SimpleEvent<B>, c?: SimpleEvent<C>): SimpleEvent<[A?, B?, C?]>;\r\n"}}
