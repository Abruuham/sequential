{"code":"import { DefinitionChangeType } from '../designer-configuration';\r\nimport { EditorRenderer } from './editor-renderer';\r\nexport class EditorApi {\r\n    constructor(state, definitionWalker, stateModifier) {\r\n        this.state = state;\r\n        this.definitionWalker = definitionWalker;\r\n        this.stateModifier = stateModifier;\r\n    }\r\n    isCollapsed() {\r\n        return this.state.isEditorCollapsed;\r\n    }\r\n    isReadonly() {\r\n        return this.state.isReadonly;\r\n    }\r\n    toggleIsCollapsed() {\r\n        this.state.setIsEditorCollapsed(!this.state.isEditorCollapsed);\r\n    }\r\n    subscribeIsCollapsed(listener) {\r\n        this.state.onIsEditorCollapsedChanged.subscribe(listener);\r\n    }\r\n    getDefinition() {\r\n        return this.state.definition;\r\n    }\r\n    addDefinitionModifierDependency(dependency) {\r\n        this.stateModifier.addDependency(dependency);\r\n    }\r\n    runRenderer(rendererHandler, customSelectedStepIdProvider) {\r\n        const selectedStepIdProvider = customSelectedStepIdProvider || this.state;\r\n        return EditorRenderer.create(this.state, selectedStepIdProvider, this.definitionWalker, rendererHandler);\r\n    }\r\n    createStepEditorContext(stepId) {\r\n        if (!stepId) {\r\n            throw new Error('Step id is empty');\r\n        }\r\n        return {\r\n            notifyPropertiesChanged: () => {\r\n                this.state.notifyDefinitionChanged(DefinitionChangeType.stepPropertyChanged, stepId);\r\n            },\r\n            notifyNameChanged: () => {\r\n                this.state.notifyDefinitionChanged(DefinitionChangeType.stepNameChanged, stepId);\r\n            },\r\n            notifyChildrenChanged: () => {\r\n                this.state.notifyDefinitionChanged(DefinitionChangeType.stepChildrenChanged, stepId);\r\n                this.stateModifier.updateDependencies();\r\n            }\r\n        };\r\n    }\r\n    createRootEditorContext() {\r\n        return {\r\n            notifyPropertiesChanged: () => {\r\n                this.state.notifyDefinitionChanged(DefinitionChangeType.rootPropertyChanged, null);\r\n            }\r\n        };\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-state.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/modifier/state-modifier.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-configuration.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/api/editor-renderer.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/definition.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/index.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/modifier/index.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/api/editor-api.d.ts","writeByteOrderMark":false,"text":"import { DesignerState } from '../designer-state';\r\nimport { StateModifier } from '../modifier/state-modifier';\r\nimport { RootEditorContext, StepEditorContext } from '../designer-configuration';\r\nimport { EditorRenderer, EditorRendererHandler } from './editor-renderer';\r\nimport { Definition, DefinitionWalker } from '../definition';\r\nimport { SimpleEvent, SimpleEventListener } from '../core';\r\nimport { StateModifierDependency } from '../modifier';\r\nexport interface SelectedStepIdProvider {\r\n    onSelectedStepIdChanged: SimpleEvent<string | null>;\r\n    selectedStepId: string | null;\r\n}\r\nexport declare class EditorApi {\r\n    private readonly state;\r\n    private readonly definitionWalker;\r\n    private readonly stateModifier;\r\n    constructor(state: DesignerState, definitionWalker: DefinitionWalker, stateModifier: StateModifier);\r\n    isCollapsed(): boolean;\r\n    isReadonly(): boolean;\r\n    toggleIsCollapsed(): void;\r\n    subscribeIsCollapsed(listener: SimpleEventListener<boolean>): void;\r\n    getDefinition(): Definition;\r\n    addDefinitionModifierDependency(dependency: StateModifierDependency): void;\r\n    runRenderer(rendererHandler: EditorRendererHandler, customSelectedStepIdProvider: SelectedStepIdProvider | null): EditorRenderer;\r\n    createStepEditorContext(stepId: string): StepEditorContext;\r\n    createRootEditorContext(): RootEditorContext;\r\n}\r\n"}}
