{"code":"import { Vector } from '../../core';\r\nimport { NextQuantifiedNumber } from './next-quantified-number';\r\nconst SCALES = [0.06, 0.08, 0.1, 0.12, 0.16, 0.2, 0.26, 0.32, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1];\r\nconst MAX_DELTA_Y = 16;\r\nconst quantifiedScale = new NextQuantifiedNumber(SCALES);\r\nexport class QuantifiedScaleViewportCalculator {\r\n    static zoom(current, direction) {\r\n        const nextScale = quantifiedScale.next(current.scale, direction);\r\n        return {\r\n            position: current.position,\r\n            scale: nextScale.next\r\n        };\r\n    }\r\n    static zoomByWheel(current, e, canvasPosition) {\r\n        if (e.deltaY === 0) {\r\n            return null;\r\n        }\r\n        const nextScale = quantifiedScale.next(current.scale, e.deltaY < 0);\r\n        let scale;\r\n        const absDeltaY = Math.abs(e.deltaY);\r\n        if (absDeltaY < MAX_DELTA_Y) {\r\n            const fraction = absDeltaY / MAX_DELTA_Y;\r\n            const step = nextScale.next - nextScale.current;\r\n            scale = current.scale + step * fraction;\r\n        }\r\n        else {\r\n            scale = nextScale.next;\r\n        }\r\n        const mousePoint = new Vector(e.pageX, e.pageY).subtract(canvasPosition);\r\n        // The real point is point on canvas with no scale.\r\n        const mouseRealPoint = mousePoint.divideByScalar(current.scale).subtract(current.position.divideByScalar(current.scale));\r\n        const position = mouseRealPoint.multiplyByScalar(-scale).add(mousePoint);\r\n        return { position, scale };\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/index.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/viewport/next-quantified-number.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/workspace/viewport/quantified-scale-viewport-calculator.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../../core';\r\nimport { Viewport } from '../../designer-extension';\r\nexport declare class QuantifiedScaleViewportCalculator {\r\n    static zoom(current: Viewport, direction: boolean): Viewport;\r\n    static zoomByWheel(current: Viewport, e: WheelEvent, canvasPosition: Vector): Viewport | null;\r\n}\r\n"}}
