{"code":"import { race } from '../core/simple-event-race';\r\nimport { Vector } from '../core/vector';\r\nimport { StepChildrenType } from '../definition';\r\nimport { WorkspaceView } from './workspace-view';\r\nimport { ClickBehaviorResolver } from '../behaviors/click-behavior-resolver';\r\nimport { SimpleEvent } from '../core/simple-event';\r\nimport { BadgesResultFactory } from './badges/badges-result-factory';\r\nimport { findValidationBadgeIndex } from './badges/find-validation-badge-index';\r\nimport { ContextMenuController } from './context-menu/context-menu-controller';\r\nimport { DefinitionChangeType } from '../designer-configuration';\r\nimport { ContextMenuItemsBuilder } from './context-menu/context-menu-items-builder';\r\nexport class Workspace {\r\n    static create(parent, designerContext, api) {\r\n        var _a;\r\n        const view = WorkspaceView.create(parent, designerContext.componentContext);\r\n        const clickBehaviorResolver = new ClickBehaviorResolver(designerContext);\r\n        const wheelController = designerContext.services.wheelController.create(api.workspace);\r\n        const contextMenuItemsBuilder = new ContextMenuItemsBuilder(api.viewport, designerContext.stateModifier, designerContext.state, ((_a = designerContext.services.contextMenu) === null || _a === void 0 ? void 0 : _a.createItemsProvider)\r\n            ? designerContext.services.contextMenu.createItemsProvider(designerContext.customActionController)\r\n            : undefined);\r\n        const contextMenuController = new ContextMenuController(designerContext.theme, designerContext.configuration, contextMenuItemsBuilder);\r\n        const workspace = new Workspace(view, designerContext.definitionWalker, designerContext.state, designerContext.behaviorController, wheelController, contextMenuController, clickBehaviorResolver, api.viewport, designerContext.services);\r\n        setTimeout(() => {\r\n            workspace.updateRootComponent();\r\n            api.viewport.resetViewport();\r\n        });\r\n        designerContext.setWorkspaceController(workspace);\r\n        designerContext.state.onViewportChanged.subscribe(vp => workspace.onViewportChanged(vp));\r\n        designerContext.state.onIsDraggingChanged.subscribe(is => workspace.onIsDraggingChanged(is));\r\n        race(0, designerContext.state.onDefinitionChanged, designerContext.state.onSelectedStepIdChanged, designerContext.state.onFolderPathChanged).subscribe(r => {\r\n            workspace.onStateChanged(r[0], r[1], r[2]);\r\n        });\r\n        view.bindClick(workspace.onClick);\r\n        view.bindWheel(workspace.onWheel);\r\n        view.bindContextMenu(workspace.onContextMenu);\r\n        return workspace;\r\n    }\r\n    constructor(view, definitionWalker, state, behaviorController, wheelController, contextMenuController, clickBehaviorResolver, viewportApi, services) {\r\n        this.view = view;\r\n        this.definitionWalker = definitionWalker;\r\n        this.state = state;\r\n        this.behaviorController = behaviorController;\r\n        this.wheelController = wheelController;\r\n        this.contextMenuController = contextMenuController;\r\n        this.clickBehaviorResolver = clickBehaviorResolver;\r\n        this.viewportApi = viewportApi;\r\n        this.services = services;\r\n        this.onRendered = new SimpleEvent();\r\n        this.isValid = false;\r\n        this.selectedStepComponent = null;\r\n        this.validationErrorBadgeIndex = null;\r\n        this.onClick = (position, target, buttonIndex, altKey) => {\r\n            const isPrimaryButton = buttonIndex === 0;\r\n            const isMiddleButton = buttonIndex === 1;\r\n            if (isPrimaryButton || isMiddleButton) {\r\n                const forceMove = isMiddleButton || altKey;\r\n                const commandOrNull = this.resolveClick(target, position);\r\n                const behavior = this.clickBehaviorResolver.resolve(commandOrNull, target, forceMove);\r\n                this.behaviorController.start(position, behavior);\r\n            }\r\n        };\r\n        this.onWheel = (e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            this.wheelController.onWheel(e);\r\n        };\r\n        this.onContextMenu = (position, target) => {\r\n            const commandOrNull = this.resolveClick(target, position);\r\n            this.contextMenuController.tryOpen(position, commandOrNull);\r\n        };\r\n    }\r\n    updateRootComponent() {\r\n        this.selectedStepComponent = null;\r\n        let parentSequencePlaceIndicator;\r\n        let sequence;\r\n        const stepId = this.state.tryGetLastStepIdFromFolderPath();\r\n        if (stepId) {\r\n            const parentSequence = this.definitionWalker.getParentSequence(this.state.definition, stepId);\r\n            const children = this.definitionWalker.getChildren(parentSequence.step);\r\n            if (!children || children.type !== StepChildrenType.sequence) {\r\n                throw new Error('Cannot find single sequence in folder step');\r\n            }\r\n            sequence = children.items;\r\n            parentSequencePlaceIndicator = {\r\n                sequence: parentSequence.parentSequence,\r\n                index: parentSequence.index\r\n            };\r\n        }\r\n        else {\r\n            sequence = this.state.definition.sequence;\r\n            parentSequencePlaceIndicator = null;\r\n        }\r\n        this.view.render(sequence, parentSequencePlaceIndicator);\r\n        this.trySelectStepComponent(this.state.selectedStepId);\r\n        this.updateBadges();\r\n        this.onRendered.forward();\r\n    }\r\n    updateBadges() {\r\n        const result = BadgesResultFactory.create(this.services);\r\n        this.getRootComponent().updateBadges(result);\r\n        if (this.validationErrorBadgeIndex === null) {\r\n            this.validationErrorBadgeIndex = findValidationBadgeIndex(this.services.badges);\r\n        }\r\n        this.isValid = Boolean(result[this.validationErrorBadgeIndex]);\r\n    }\r\n    getPlaceholders() {\r\n        const result = [];\r\n        this.getRootComponent().getPlaceholders(result);\r\n        return result;\r\n    }\r\n    getComponentByStepId(stepId) {\r\n        const component = this.getRootComponent().findById(stepId);\r\n        if (!component) {\r\n            throw new Error(`Cannot find component for step id: ${stepId}`);\r\n        }\r\n        return component;\r\n    }\r\n    getCanvasPosition() {\r\n        return this.view.getCanvasPosition();\r\n    }\r\n    getCanvasSize() {\r\n        return this.view.getCanvasSize();\r\n    }\r\n    getRootComponentSize() {\r\n        const view = this.getRootComponent().view;\r\n        return new Vector(view.width, view.height);\r\n    }\r\n    updateCanvasSize() {\r\n        setTimeout(() => this.view.refreshSize());\r\n    }\r\n    destroy() {\r\n        this.contextMenuController.destroy();\r\n        this.view.destroy();\r\n    }\r\n    onIsDraggingChanged(isDragging) {\r\n        this.getRootComponent().setIsDragging(isDragging);\r\n    }\r\n    onViewportChanged(viewport) {\r\n        this.view.setPositionAndScale(viewport.position, viewport.scale);\r\n    }\r\n    onStateChanged(definitionChanged, selectedStepIdChanged, folderPathChanged) {\r\n        if (folderPathChanged) {\r\n            this.updateRootComponent();\r\n            this.viewportApi.resetViewport();\r\n        }\r\n        else if (definitionChanged) {\r\n            if (definitionChanged.changeType === DefinitionChangeType.stepPropertyChanged) {\r\n                this.updateBadges();\r\n            }\r\n            else {\r\n                this.updateRootComponent();\r\n            }\r\n        }\r\n        else if (selectedStepIdChanged !== undefined) {\r\n            this.trySelectStepComponent(selectedStepIdChanged);\r\n        }\r\n    }\r\n    trySelectStepComponent(stepId) {\r\n        if (this.selectedStepComponent) {\r\n            this.selectedStepComponent.setIsSelected(false);\r\n            this.selectedStepComponent = null;\r\n        }\r\n        if (stepId) {\r\n            this.selectedStepComponent = this.getRootComponent().findById(stepId);\r\n            if (this.selectedStepComponent) {\r\n                this.selectedStepComponent.setIsSelected(true);\r\n            }\r\n        }\r\n    }\r\n    resolveClick(element, position) {\r\n        const click = {\r\n            element,\r\n            position,\r\n            scale: this.state.viewport.scale\r\n        };\r\n        return this.getRootComponent().resolveClick(click);\r\n    }\r\n    getRootComponent() {\r\n        if (this.view.rootComponent) {\r\n            return this.view.rootComponent;\r\n        }\r\n        throw new Error('Root component not found');\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/simple-event-race.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/vector.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/definition.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-context.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/component.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/workspace-view.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-state.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/workspace-controller.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/behaviors/click-behavior-resolver.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/behaviors/behavior-controller.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/simple-event.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/api/designer-api.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/step-component.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/badges/badges-result-factory.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/services.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/badges/find-validation-badge-index.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/context-menu/context-menu-controller.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/api/viewport-api.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-configuration.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/context-menu/context-menu-items-builder.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/workspace/workspace.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../core/vector';\r\nimport { DesignerContext } from '../designer-context';\r\nimport { Placeholder } from './component';\r\nimport { WorkspaceController } from './workspace-controller';\r\nimport { SimpleEvent } from '../core/simple-event';\r\nimport { DesignerApi } from '../api/designer-api';\r\nimport { StepComponent } from './step-component';\r\nexport declare class Workspace implements WorkspaceController {\r\n    private readonly view;\r\n    private readonly definitionWalker;\r\n    private readonly state;\r\n    private readonly behaviorController;\r\n    private readonly wheelController;\r\n    private readonly contextMenuController;\r\n    private readonly clickBehaviorResolver;\r\n    private readonly viewportApi;\r\n    private readonly services;\r\n    static create(parent: HTMLElement, designerContext: DesignerContext, api: DesignerApi): Workspace;\r\n    readonly onRendered: SimpleEvent<void>;\r\n    isValid: boolean;\r\n    private selectedStepComponent;\r\n    private validationErrorBadgeIndex;\r\n    private constructor();\r\n    updateRootComponent(): void;\r\n    updateBadges(): void;\r\n    getPlaceholders(): Placeholder[];\r\n    getComponentByStepId(stepId: string): StepComponent;\r\n    getCanvasPosition(): Vector;\r\n    getCanvasSize(): Vector;\r\n    getRootComponentSize(): Vector;\r\n    updateCanvasSize(): void;\r\n    destroy(): void;\r\n    private readonly onClick;\r\n    private readonly onWheel;\r\n    private readonly onContextMenu;\r\n    private onIsDraggingChanged;\r\n    private onViewportChanged;\r\n    private onStateChanged;\r\n    private trySelectStepComponent;\r\n    private resolveClick;\r\n    private getRootComponent;\r\n}\r\n"}}
