{"code":"import { ObjectCloner, Uid } from '../core';\r\nimport { DragStepBehavior } from '../behaviors/drag-step-behavior';\r\nexport class ToolboxApi {\r\n    constructor(state, designerContext, behaviorController, toolboxDataProvider, uidGenerator) {\r\n        this.state = state;\r\n        this.designerContext = designerContext;\r\n        this.behaviorController = behaviorController;\r\n        this.toolboxDataProvider = toolboxDataProvider;\r\n        this.uidGenerator = uidGenerator;\r\n    }\r\n    isCollapsed() {\r\n        return this.state.isToolboxCollapsed;\r\n    }\r\n    toggleIsCollapsed() {\r\n        this.state.setIsToolboxCollapsed(!this.state.isToolboxCollapsed);\r\n    }\r\n    subscribeIsCollapsed(listener) {\r\n        this.state.onIsToolboxCollapsedChanged.subscribe(listener);\r\n    }\r\n    getAllGroups() {\r\n        return this.toolboxDataProvider.getAllGroups();\r\n    }\r\n    applyFilter(allGroups, filter) {\r\n        return this.toolboxDataProvider.applyFilter(allGroups, filter);\r\n    }\r\n    /**\r\n     * @param position Mouse or touch position.\r\n     * @param step Step definition.\r\n     * @returns If started dragging returns true, otherwise returns false.\r\n     */\r\n    tryDrag(position, step) {\r\n        if (!this.state.isReadonly) {\r\n            const newStep = this.activateStep(step);\r\n            this.behaviorController.start(position, DragStepBehavior.create(this.designerContext, newStep));\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    activateStep(step) {\r\n        const newStep = ObjectCloner.deepClone(step);\r\n        newStep.id = this.uidGenerator ? this.uidGenerator() : Uid.next();\r\n        return newStep;\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/definition.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/behaviors/behavior-controller.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/index.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-configuration.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-state.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/behaviors/drag-step-behavior.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-context.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/toolbox/toolbox-data-provider.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/api/toolbox-api.d.ts","writeByteOrderMark":false,"text":"import { BehaviorController } from '../behaviors/behavior-controller';\r\nimport { SimpleEventListener, Vector } from '../core';\r\nimport { StepDefinition, UidGenerator } from '../designer-configuration';\r\nimport { DesignerState } from '../designer-state';\r\nimport { DesignerContext } from '../designer-context';\r\nimport { ToolboxDataProvider, ToolboxGroupData } from '../toolbox/toolbox-data-provider';\r\nexport declare class ToolboxApi {\r\n    private readonly state;\r\n    private readonly designerContext;\r\n    private readonly behaviorController;\r\n    private readonly toolboxDataProvider;\r\n    private readonly uidGenerator;\r\n    constructor(state: DesignerState, designerContext: DesignerContext, behaviorController: BehaviorController, toolboxDataProvider: ToolboxDataProvider, uidGenerator: UidGenerator | undefined);\r\n    isCollapsed(): boolean;\r\n    toggleIsCollapsed(): void;\r\n    subscribeIsCollapsed(listener: SimpleEventListener<boolean>): void;\r\n    getAllGroups(): ToolboxGroupData[];\r\n    applyFilter(allGroups: ToolboxGroupData[], filter: string | undefined): ToolboxGroupData[];\r\n    /**\r\n     * @param position Mouse or touch position.\r\n     * @param step Step definition.\r\n     * @returns If started dragging returns true, otherwise returns false.\r\n     */\r\n    tryDrag(position: Vector, step: StepDefinition): boolean;\r\n    private activateStep;\r\n}\r\n"}}
