{"code":"import { ClickCommandType } from '../component';\r\nexport class ContextMenuItemsBuilder {\r\n    constructor(viewportApi, stateModifier, state, customMenuItemsProvider) {\r\n        this.viewportApi = viewportApi;\r\n        this.stateModifier = stateModifier;\r\n        this.state = state;\r\n        this.customMenuItemsProvider = customMenuItemsProvider;\r\n    }\r\n    build(commandOrNull) {\r\n        const items = [];\r\n        if (commandOrNull && commandOrNull.type === ClickCommandType.selectStep) {\r\n            const ssc = commandOrNull;\r\n            const step = ssc.component.step;\r\n            const parentSequence = ssc.component.parentSequence;\r\n            items.push({\r\n                label: step.name,\r\n                order: 0\r\n            });\r\n            this.tryAppendCustomItems(items, step, parentSequence);\r\n            if (this.stateModifier.isSelectable(step, parentSequence)) {\r\n                if (this.state.selectedStepId === step.id) {\r\n                    items.push({\r\n                        label: `Unselect`,\r\n                        order: 10,\r\n                        callback: () => {\r\n                            this.state.setSelectedStepId(null);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    items.push({\r\n                        label: 'Select',\r\n                        order: 20,\r\n                        callback: () => {\r\n                            this.stateModifier.trySelectStepById(step.id);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (!this.state.isReadonly) {\r\n                if (this.stateModifier.isDeletable(step.id)) {\r\n                    items.push({\r\n                        label: 'Delete',\r\n                        order: 30,\r\n                        callback: () => {\r\n                            this.stateModifier.tryDelete(step.id);\r\n                        }\r\n                    });\r\n                }\r\n                if (this.stateModifier.isDuplicable(step, parentSequence)) {\r\n                    items.push({\r\n                        label: 'Duplicate',\r\n                        order: 40,\r\n                        callback: () => {\r\n                            this.stateModifier.tryDuplicate(step, parentSequence);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.tryAppendCustomItems(items, null, this.state.definition.sequence);\r\n        }\r\n        items.push({\r\n            label: 'Reset view',\r\n            order: 50,\r\n            callback: () => {\r\n                this.viewportApi.resetViewport();\r\n            }\r\n        });\r\n        items.sort((a, b) => a.order - b.order);\r\n        return items;\r\n    }\r\n    tryAppendCustomItems(items, step, parentSequence) {\r\n        if (this.customMenuItemsProvider) {\r\n            const customItems = this.customMenuItemsProvider.getItems(step, parentSequence);\r\n            for (const customItem of customItems) {\r\n                items.push(customItem);\r\n            }\r\n        }\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/definition.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/api/viewport-api.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/modifier/state-modifier.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-extension.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-state.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/workspace/component.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/workspace/context-menu/context-menu-items-builder.d.ts","writeByteOrderMark":false,"text":"import { ViewportApi } from '../../api/viewport-api';\r\nimport { StateModifier } from '../../modifier/state-modifier';\r\nimport { ContextMenuItem, ContextMenuItemsProvider } from '../../designer-extension';\r\nimport { DesignerState } from '../../designer-state';\r\nimport { ClickCommand } from '../component';\r\nexport declare class ContextMenuItemsBuilder {\r\n    private readonly viewportApi;\r\n    private readonly stateModifier;\r\n    private readonly state;\r\n    private readonly customMenuItemsProvider;\r\n    constructor(viewportApi: ViewportApi, stateModifier: StateModifier, state: DesignerState, customMenuItemsProvider: ContextMenuItemsProvider | undefined);\r\n    build(commandOrNull: ClickCommand | null): ContextMenuItem[];\r\n    private tryAppendCustomItems;\r\n}\r\n"}}
