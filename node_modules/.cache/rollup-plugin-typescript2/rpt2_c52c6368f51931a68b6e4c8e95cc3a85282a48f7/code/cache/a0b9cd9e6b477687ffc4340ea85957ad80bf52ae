{"code":"import { SimpleEvent } from '../core';\r\nexport class ControlBarApi {\r\n    static create(state, historyController, stateModifier, viewportApi) {\r\n        const api = new ControlBarApi(state, historyController, stateModifier, viewportApi);\r\n        state.onIsReadonlyChanged.subscribe(api.onStateChanged.forward);\r\n        state.onSelectedStepIdChanged.subscribe(api.onStateChanged.forward);\r\n        state.onIsDragDisabledChanged.subscribe(api.onStateChanged.forward);\r\n        if (api.isUndoRedoSupported()) {\r\n            state.onDefinitionChanged.subscribe(api.onStateChanged.forward);\r\n        }\r\n        return api;\r\n    }\r\n    constructor(state, historyController, stateModifier, viewportApi) {\r\n        this.state = state;\r\n        this.historyController = historyController;\r\n        this.stateModifier = stateModifier;\r\n        this.viewportApi = viewportApi;\r\n        this.onStateChanged = new SimpleEvent();\r\n    }\r\n    resetViewport() {\r\n        this.viewportApi.resetViewport();\r\n    }\r\n    zoomIn() {\r\n        this.viewportApi.zoom(true);\r\n    }\r\n    zoomOut() {\r\n        this.viewportApi.zoom(false);\r\n    }\r\n    isDragDisabled() {\r\n        return this.state.isDragDisabled;\r\n    }\r\n    toggleIsDragDisabled() {\r\n        this.state.toggleIsDragDisabled();\r\n    }\r\n    isUndoRedoSupported() {\r\n        return !!this.historyController;\r\n    }\r\n    tryUndo() {\r\n        if (this.canUndo() && this.historyController) {\r\n            this.historyController.undo();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    canUndo() {\r\n        return !!this.historyController && this.historyController.canUndo() && !this.state.isReadonly && !this.state.isDragging;\r\n    }\r\n    tryRedo() {\r\n        if (this.canRedo() && this.historyController) {\r\n            this.historyController.redo();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    canRedo() {\r\n        return !!this.historyController && this.historyController.canRedo() && !this.state.isReadonly && !this.state.isDragging;\r\n    }\r\n    tryDelete() {\r\n        if (this.canDelete() && this.state.selectedStepId) {\r\n            this.stateModifier.tryDelete(this.state.selectedStepId);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    canDelete() {\r\n        return (!!this.state.selectedStepId &&\r\n            !this.state.isReadonly &&\r\n            !this.state.isDragging &&\r\n            this.stateModifier.isDeletable(this.state.selectedStepId));\r\n    }\r\n}\r\n","references":["C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/core/index.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/modifier/state-modifier.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/designer-state.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/history-controller.ts","C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/src/api/viewport-api.ts"],"dts":{"name":"C:/Users/abrah/Documents/sequential/sequential-workflow-designer/designer/build/api/control-bar-api.d.ts","writeByteOrderMark":false,"text":"import { SimpleEvent } from '../core';\r\nimport { StateModifier } from '../modifier/state-modifier';\r\nimport { DesignerState } from '../designer-state';\r\nimport { HistoryController } from '../history-controller';\r\nimport { ViewportApi } from './viewport-api';\r\nexport declare class ControlBarApi {\r\n    private readonly state;\r\n    private readonly historyController;\r\n    private readonly stateModifier;\r\n    private readonly viewportApi;\r\n    static create(state: DesignerState, historyController: HistoryController | undefined, stateModifier: StateModifier, viewportApi: ViewportApi): ControlBarApi;\r\n    private constructor();\r\n    readonly onStateChanged: SimpleEvent<unknown>;\r\n    resetViewport(): void;\r\n    zoomIn(): void;\r\n    zoomOut(): void;\r\n    isDragDisabled(): boolean;\r\n    toggleIsDragDisabled(): void;\r\n    isUndoRedoSupported(): boolean;\r\n    tryUndo(): boolean;\r\n    canUndo(): boolean;\r\n    tryRedo(): boolean;\r\n    canRedo(): boolean;\r\n    tryDelete(): boolean;\r\n    canDelete(): boolean;\r\n}\r\n"}}
